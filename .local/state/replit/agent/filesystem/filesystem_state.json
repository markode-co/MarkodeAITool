{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        arabic: [\"var(--font-arabic)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2795},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY \n});\n\nexport interface GeneratedCode {\n  files: Record<string, string>;\n  framework: string;\n  language: string;\n  deploymentInstructions: string;\n}\n\nexport async function generateProjectCode(\n  prompt: string, \n  framework?: string,\n  language?: string\n): Promise<GeneratedCode> {\n  try {\n    // Use the latest available OpenAI model\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert full-stack developer who generates complete, production-ready code based on project descriptions.\n\nGenerate a complete project structure with all necessary files based on the user's description. \n\nRequirements:\n- Create a fully functional application\n- Include package.json, configuration files, and all source code\n- Use modern best practices and clean code\n- Include proper error handling and validation\n- Generate responsive, accessible UI components\n- Support both Arabic and English if mentioned\n- Use TypeScript when possible\n- Include deployment instructions\n\nRespond with JSON in this exact format:\n{\n  \"files\": {\n    \"package.json\": \"file content here\",\n    \"src/index.js\": \"file content here\",\n    \"src/components/App.js\": \"file content here\",\n    // ... all necessary files\n  },\n  \"framework\": \"react|vue|angular|vanilla|nodejs|python|php\",\n  \"language\": \"javascript|typescript|python|php\",\n  \"deploymentInstructions\": \"Step-by-step deployment instructions\"\n}`\n        },\n        {\n          role: \"user\",\n          content: `Generate a complete project for: ${prompt}\n\n${framework ? `Preferred framework: ${framework}` : ''}\n${language ? `Preferred language: ${language}` : ''}\n\nCreate all necessary files including configuration, source code, and styling.`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    return {\n      files: result.files || {},\n      framework: result.framework || 'react',\n      language: result.language || 'javascript',\n      deploymentInstructions: result.deploymentInstructions || 'No deployment instructions provided'\n    };\n  } catch (error) {\n    console.error('Error generating project code:', error);\n    throw new Error('Failed to generate project code');\n  }\n}\n\nfunction sanitizeCodeOutput(rawOutput: string): string {\n  if (!rawOutput || typeof rawOutput !== 'string') {\n    throw new Error('Invalid code output received');\n  }\n\n  let cleaned = rawOutput.trim();\n  \n  // Remove all lines that are markdown code fences (``` or ~~~ with any language/spaces)\n  cleaned = cleaned.replace(/^```.*$/gm, '');  // Remove all ``` fence lines\n  cleaned = cleaned.replace(/^~~~.*$/gm, '');  // Remove all ~~~ fence lines\n  \n  // Remove any leading/trailing whitespace again\n  cleaned = cleaned.trim();\n  \n  if (!cleaned) {\n    throw new Error('Empty code output after sanitization');\n  }\n  \n  return cleaned;\n}\n\nexport async function improveCode(\n  code: string,\n  improvements: string\n): Promise<string> {\n  try {\n    // Validate inputs\n    if (!code || typeof code !== 'string' || code.trim().length === 0) {\n      throw new Error('Invalid code input');\n    }\n    \n    if (!improvements || typeof improvements !== 'string' || improvements.trim().length === 0) {\n      throw new Error('Invalid improvements input');\n    }\n\n    // Use the latest available OpenAI model\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert developer who improves and optimizes code based on specific requirements. Return ONLY the improved code without any explanations, markdown formatting, or code fences. Do not include ``` or language tags.\"\n        },\n        {\n          role: \"user\",\n          content: `Improve this code based on the following requirements:\n${improvements.trim()}\n\nOriginal code:\n${code}\n\nReturn only the clean improved code without any markdown formatting:`\n        }\n      ],\n    });\n\n    const rawOutput = response.choices[0].message.content;\n    if (!rawOutput) {\n      throw new Error('No response received from OpenAI');\n    }\n\n    return sanitizeCodeOutput(rawOutput);\n  } catch (error) {\n    console.error('Error improving code:', error);\n    throw new Error('Failed to improve code');\n  }\n}\n","size_bytes":4507},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { generateProjectCode, improveCode } from \"./openai\";\nimport { createProjectFormSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Project routes\n  app.get('/api/projects', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const projects = await storage.getUserProjects(userId);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const project = await storage.getProject(id);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Check if user owns the project\n      if (project.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post('/api/projects', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = createProjectFormSchema.parse(req.body);\n      \n      // Set status to building while generating code\n      const project = await storage.createProject({\n        ...validatedData,\n        userId,\n        status: 'building',\n      });\n\n      // Generate code asynchronously\n      console.log(`Starting code generation for project ${project.id} with prompt: \"${validatedData.prompt}\"`);\n      generateProjectCode(\n        validatedData.prompt, \n        validatedData.framework,\n        validatedData.language || undefined\n      ).then(async (generatedCode) => {\n        console.log(`Code generation successful for project ${project.id}`);\n        await storage.updateProject(project.id, {\n          sourceCode: generatedCode,\n          status: 'ready',\n        });\n        console.log(`Project ${project.id} status updated to ready`);\n      }).catch(async (error) => {\n        console.error(`Error generating code for project ${project.id}:`, error);\n        console.error('Full error details:', error.message, error.stack);\n        await storage.updateProject(project.id, {\n          status: 'error',\n        });\n        console.log(`Project ${project.id} status updated to error`);\n      });\n\n      res.json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error creating project:\", error);\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  app.put('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const project = await storage.getProject(id);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      if (project.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updated = await storage.updateProject(id, req.body);\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating project:\", error);\n      res.status(500).json({ message: \"Failed to update project\" });\n    }\n  });\n\n  app.delete('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const project = await storage.getProject(id);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      if (project.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteProject(id);\n      res.json({ message: \"Project deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Template routes\n  app.get('/api/templates', async (req, res) => {\n    try {\n      const templates = await storage.getTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch templates\" });\n    }\n  });\n\n  app.get('/api/templates/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const template = await storage.getTemplate(id);\n      \n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error fetching template:\", error);\n      res.status(500).json({ message: \"Failed to fetch template\" });\n    }\n  });\n\n  app.post('/api/projects/from-template/:templateId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { templateId } = req.params;\n      const { name, description } = req.body;\n      const userId = req.user.claims.sub;\n\n      const template = await storage.getTemplate(templateId);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n\n      const project = await storage.createProject({\n        userId,\n        name: name || template.name,\n        description: description || template.description,\n        framework: template.framework,\n        language: template.language,\n        sourceCode: template.sourceCode,\n        status: 'ready',\n      });\n\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error creating project from template:\", error);\n      res.status(500).json({ message: \"Failed to create project from template\" });\n    }\n  });\n\n  // Code improvement endpoint\n  app.post('/api/projects/:id/improve', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { code, improvements } = req.body;\n      const project = await storage.getProject(id);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      if (project.userId !== req.user.claims.sub) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const improvedCode = await improveCode(code, improvements);\n      res.json({ improvedCode });\n    } catch (error) {\n      console.error(\"Error improving code:\", error);\n      res.status(500).json({ message: \"Failed to improve code\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7348},"server/storage.ts":{"content":"import {\n  users,\n  projects,\n  templates,\n  type User,\n  type UpsertUser,\n  type Project,\n  type InsertProject,\n  type Template,\n  type InsertTemplate,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Project operations\n  getUserProjects(userId: string): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<InsertProject>): Promise<Project>;\n  deleteProject(id: string): Promise<void>;\n  \n  // Template operations\n  getTemplates(): Promise<Template[]>;\n  getTemplate(id: string): Promise<Template | undefined>;\n  createTemplate(template: InsertTemplate): Promise<Template>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Project operations\n  async getUserProjects(userId: string): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects)\n      .where(eq(projects.userId, userId))\n      .orderBy(desc(projects.updatedAt));\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const [created] = await db\n      .insert(projects)\n      .values(project)\n      .returning();\n    return created;\n  }\n\n  async updateProject(id: string, updates: Partial<InsertProject>): Promise<Project> {\n    const [updated] = await db\n      .update(projects)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    await db.delete(projects).where(eq(projects.id, id));\n  }\n\n  // Template operations\n  async getTemplates(): Promise<Template[]> {\n    return await db\n      .select()\n      .from(templates)\n      .where(eq(templates.isPublic, true))\n      .orderBy(desc(templates.createdAt));\n  }\n\n  async getTemplate(id: string): Promise<Template | undefined> {\n    const [template] = await db.select().from(templates).where(eq(templates.id, id));\n    return template;\n  }\n\n  async createTemplate(template: InsertTemplate): Promise<Template> {\n    const [created] = await db\n      .insert(templates)\n      .values(template)\n      .returning();\n    return created;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":3071},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  framework: varchar(\"framework\").notNull(), // react, vue, angular, etc.\n  language: varchar(\"language\").default(\"javascript\"), // javascript, typescript, python, etc.\n  status: varchar(\"status\").default(\"draft\"), // draft, building, ready, deployed, error\n  sourceCode: jsonb(\"source_code\"), // Generated code files\n  deployUrl: varchar(\"deploy_url\"), // Deployment URL\n  isPublic: boolean(\"is_public\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Project templates table\nexport const templates = pgTable(\"templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\").notNull(), // ecommerce, portfolio, blog, etc.\n  framework: varchar(\"framework\").notNull(),\n  language: varchar(\"language\").default(\"javascript\"),\n  sourceCode: jsonb(\"source_code\").notNull(),\n  imageUrl: varchar(\"image_url\"),\n  isPublic: boolean(\"is_public\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertProject = typeof projects.$inferInsert;\nexport type Project = typeof projects.$inferSelect;\n\nexport type InsertTemplate = typeof templates.$inferInsert;\nexport type Template = typeof templates.$inferSelect;\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTemplateSchema = createInsertSchema(templates).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Schema for form submission (excludes userId which is set by backend)\nexport const createProjectFormSchema = insertProjectSchema.omit({\n  userId: true,\n}).extend({\n  prompt: z.string().min(10, \"يجب أن يكون الوصف 10 أحرف على الأقل\"),\n});\n\n// Schema for backend validation (includes userId)\nexport const createProjectSchema = insertProjectSchema.extend({\n  prompt: z.string().min(10, \"يجب أن يكون الوصف 10 أحرف على الأقل\"),\n});\n\nexport type CreateProjectForm = z.infer<typeof createProjectFormSchema>;\nexport type CreateProject = z.infer<typeof createProjectSchema>;\n","size_bytes":3445},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { LanguageProvider } from \"@/components/LanguageProvider\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Editor from \"@/pages/Editor\";\nimport Templates from \"@/pages/Templates\";\nimport Features from \"@/pages/Features\";\nimport Pricing from \"@/pages/Pricing\";\nimport HelpCenter from \"@/pages/HelpCenter\";\nimport Contact from \"@/pages/Contact\";\nimport About from \"@/pages/About\";\nimport ComingSoon from \"@/pages/ComingSoon\";\nimport Login from \"@/pages/Login\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <Switch>\n          {isLoading || !isAuthenticated ? (\n            <>\n              <Route path=\"/\" component={Landing} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/templates\" component={Templates} />\n              <Route path=\"/features\" component={Features} />\n              <Route path=\"/pricing\" component={Pricing} />\n              <Route path=\"/help\" component={HelpCenter} />\n              <Route path=\"/contact\" component={Contact} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/api\" component={ComingSoon} />\n              <Route path=\"/community\" component={ComingSoon} />\n              <Route path=\"/status\" component={ComingSoon} />\n              <Route path=\"/jobs\" component={ComingSoon} />\n              <Route path=\"/blog\" component={ComingSoon} />\n              <Route path=\"/partners\" component={ComingSoon} />\n            </>\n          ) : (\n            <>\n              <Route path=\"/\" component={Dashboard} />\n              <Route path=\"/dashboard\" component={Dashboard} />\n              <Route path=\"/editor/:id\" component={Editor} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/templates\" component={Templates} />\n              <Route path=\"/features\" component={Features} />\n              <Route path=\"/pricing\" component={Pricing} />\n              <Route path=\"/help\" component={HelpCenter} />\n              <Route path=\"/contact\" component={Contact} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/api\" component={ComingSoon} />\n              <Route path=\"/community\" component={ComingSoon} />\n              <Route path=\"/status\" component={ComingSoon} />\n              <Route path=\"/jobs\" component={ComingSoon} />\n              <Route path=\"/blog\" component={ComingSoon} />\n              <Route path=\"/partners\" component={ComingSoon} />\n            </>\n          )}\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\">\n        <LanguageProvider defaultLanguage=\"ar\">\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </LanguageProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3635},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Amiri:wght@400;700&family=Cairo:wght@200;300;400;500;600;700;800&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 0.5rem;\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(221.2 83.2% 53.3%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 47.4% 11.2%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(142.1 76.2% 36.3%);\n  --accent-foreground: hsl(355.7 100% 97.3%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --chart-1: hsl(221.2 83.2% 53.3%);\n  --chart-2: hsl(142.1 76.2% 36.3%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(210 40% 96%);\n  --sidebar-foreground: hsl(222.2 47.4% 11.2%);\n  --sidebar-primary: hsl(221.2 83.2% 53.3%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222.2 47.4% 11.2%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(221.2 83.2% 53.3%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-arabic: 'Cairo', 'Amiri', system-ui, sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --primary: hsl(263.4 70% 50.4%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(142.1 76.2% 36.3%);\n  --accent-foreground: hsl(355.7 100% 97.3%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(263.4 70% 50.4%);\n  --sidebar: hsl(217.2 32.6% 17.5%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(263.4 70% 50.4%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(217.2 32.6% 17.5%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217.2 32.6% 17.5%);\n  --sidebar-ring: hsl(263.4 70% 50.4%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  [dir=\"rtl\"] {\n    font-family: var(--font-arabic);\n  }\n\n  [dir=\"ltr\"] {\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(263.4 70% 50.4%) 0%, hsl(221.2 83.2% 53.3%) 100%);\n  }\n\n  .code-editor-bg {\n    background: linear-gradient(145deg, hsl(222.2 84% 4.9%) 0%, hsl(217.2 32.6% 17.5%) 100%);\n  }\n\n  .feature-card {\n    background: var(--card);\n    border: 1px solid var(--border);\n    transition: all 0.3s ease;\n  }\n\n  .feature-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  }\n\n  .dark .feature-card:hover {\n    box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);\n  }\n\n  .typing-animation {\n    border-left: 2px solid hsl(263.4 70% 50.4%);\n    animation: blink 1s infinite;\n  }\n\n  @keyframes blink {\n    0%, 50% { border-color: hsl(263.4 70% 50.4%); }\n    51%, 100% { border-color: transparent; }\n  }\n}\n\n@layer utilities {\n  .rtl-flip {\n    transform: scaleX(-1);\n  }\n\n  [dir=\"rtl\"] .rtl-flip {\n    transform: scaleX(1);\n  }\n}\n","size_bytes":3938},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CodeEditor.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Editor } from \"@monaco-editor/react\";\nimport { useTheme } from \"./ThemeProvider\";\n\ninterface CodeEditorProps {\n  value: string;\n  onChange?: (value: string | undefined) => void;\n  language?: string;\n  readOnly?: boolean;\n  height?: string;\n}\n\nexport function CodeEditor({ \n  value, \n  onChange, \n  language = \"javascript\", \n  readOnly = false,\n  height = \"400px\" \n}: CodeEditorProps) {\n  const { theme } = useTheme();\n  const editorRef = useRef(null);\n\n  const handleEditorDidMount = (editor: any) => {\n    editorRef.current = editor;\n  };\n\n  return (\n    <div className=\"border rounded-lg overflow-hidden\" data-testid=\"code-editor\">\n      <Editor\n        height={height}\n        defaultLanguage={language}\n        value={value}\n        onChange={onChange}\n        onMount={handleEditorDidMount}\n        theme={theme === \"dark\" ? \"vs-dark\" : \"light\"}\n        options={{\n          readOnly,\n          minimap: { enabled: false },\n          fontSize: 14,\n          lineNumbers: \"on\",\n          wordWrap: \"on\",\n          automaticLayout: true,\n          scrollBeyondLastLine: false,\n          renderWhitespace: \"selection\",\n          selectOnLineNumbers: true,\n          roundedSelection: false,\n          cursorStyle: \"line\",\n          cursorBlinking: \"blink\",\n          folding: true,\n          foldingHighlight: true,\n          showFoldingControls: \"always\",\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":1449},"client/src/components/Footer.tsx":{"content":"import { Code2 } from \"lucide-react\";\nimport { useLanguage } from \"./LanguageProvider\";\nimport { Link } from \"wouter\";\n\nexport function Footer() {\n  const { t } = useLanguage();\n\n  // Helper function to determine if we should use Link or anchor tag\n  const renderLink = (link: { href: string; label: string }, testId: string) => {\n    const isInternalRoute = link.href.startsWith('/') && !link.href.startsWith('#');\n    \n    if (isInternalRoute) {\n      return (\n        <Link\n          href={link.href}\n          className=\"hover:text-foreground transition-colors\"\n          data-testid={testId}\n        >\n          {link.label}\n        </Link>\n      );\n    } else {\n      return (\n        <a\n          href={link.href}\n          className=\"hover:text-foreground transition-colors\"\n          data-testid={testId}\n        >\n          {link.label}\n        </a>\n      );\n    }\n  };\n\n  const productLinks = [\n    { label: t(\"nav.features\"), href: \"/features\" },\n    { label: t(\"nav.pricing\"), href: \"/pricing\" },\n    { label: t(\"templates.title\"), href: \"/templates\" },\n    { label: \"API\", href: \"/api\" },\n  ];\n\n  const supportLinks = [\n    { label: \"مركز المساعدة\", href: \"/help\" },\n    { label: \"تواصل معنا\", href: \"/contact\" },\n    { label: t(\"nav.community\"), href: \"/community\" },\n    { label: \"حالة الخدمة\", href: \"/status\" },\n  ];\n\n  const companyLinks = [\n    { label: \"عن ماركود\", href: \"/about\" },\n    { label: \"الوظائف\", href: \"/jobs\" },\n    { label: \"المدونة\", href: \"/blog\" },\n    { label: \"الشراكات\", href: \"/partners\" },\n  ];\n\n  return (\n    <footer className=\"bg-muted/30 py-12 border-t\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className=\"w-8 h-8 rounded-lg gradient-bg flex items-center justify-center\">\n                <Code2 className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold\">ماركود</span>\n            </div>\n            <p className=\"text-muted-foreground text-sm leading-relaxed\">\n              منصتك الذكية لإنشاء المواقع والتطبيقات بالذكاء الاصطناعي. نحوّل أفكارك إلى واقع رقمي.\n            </p>\n          </div>\n\n          {/* Product */}\n          <div>\n            <h4 className=\"font-semibold mb-4\">{t(\"footer.product\")}</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              {productLinks.map((link, index) => (\n                <li key={`product-${index}`}>\n                  {renderLink(link, `footer-link-${link.label.toLowerCase()}`)}\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Support */}\n          <div>\n            <h4 className=\"font-semibold mb-4\">{t(\"footer.support\")}</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              {supportLinks.map((link, index) => (\n                <li key={`support-${index}`}>\n                  {renderLink(link, `footer-link-${link.label.toLowerCase()}`)}\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Company */}\n          <div>\n            <h4 className=\"font-semibold mb-4\">{t(\"footer.company\")}</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              {companyLinks.map((link, index) => (\n                <li key={`company-${index}`}>\n                  {renderLink(link, `footer-link-${link.label.toLowerCase()}`)}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border mt-8 pt-8 flex flex-col md:flex-row items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground mb-4 md:mb-0\">\n            © 2024 Markode App AI. {t(\"footer.rights\")}\n          </div>\n\n          <div className=\"flex items-center gap-6\">\n            <a\n              href=\"#\"\n              className=\"text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"social-twitter\"\n            >\n              <i className=\"fab fa-twitter\"></i>\n            </a>\n            <a\n              href=\"#\"\n              className=\"text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"social-linkedin\"\n            >\n              <i className=\"fab fa-linkedin\"></i>\n            </a>\n            <a\n              href=\"#\"\n              className=\"text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"social-github\"\n            >\n              <i className=\"fab fa-github\"></i>\n            </a>\n            <a\n              href=\"#\"\n              className=\"text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"social-discord\"\n            >\n              <i className=\"fab fa-discord\"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5120},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Code2, Globe, Moon, Sun, Menu } from \"lucide-react\";\nimport { useTheme } from \"./ThemeProvider\";\nimport { useLanguage } from \"./LanguageProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport function Header() {\n  const { theme, setTheme } = useTheme();\n  const { language, setLanguage, t, isRTL } = useLanguage();\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const toggleLanguage = () => {\n    setLanguage(language === \"ar\" ? \"en\" : \"ar\");\n  };\n\n  const navigation = [\n    { href: \"#features\", label: t(\"nav.features\") },\n    { href: \"#editor\", label: t(\"nav.editor\") },\n    { href: \"#pricing\", label: t(\"nav.pricing\") },\n    { href: \"#community\", label: t(\"nav.community\") },\n  ];\n\n  const authenticatedNavigation = [\n    { href: \"/dashboard\", label: t(\"nav.dashboard\") },\n    { href: \"/templates\", label: t(\"nav.templates\") },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/\" className=\"flex items-center gap-2\" data-testid=\"link-home\">\n            <div className=\"w-8 h-8 rounded-lg gradient-bg flex items-center justify-center\">\n              <Code2 className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              {t(\"hero.title.arabic\")}\n            </span>\n          </Link>\n        </div>\n\n        {/* Desktop Navigation */}\n        <nav className=\"hidden md:flex items-center gap-6\">\n          {isAuthenticated ? (\n            authenticatedNavigation.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`text-muted-foreground hover:text-foreground transition-colors ${\n                  location === item.href ? 'text-foreground font-medium' : ''\n                }`}\n                data-testid={`nav-${item.href.replace('/', '')}`}\n              >\n                {item.label}\n              </Link>\n            ))\n          ) : (\n            navigation.map((item) => (\n              <a\n                key={item.href}\n                href={item.href}\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid={`nav-${item.href.replace('#', '')}`}\n              >\n                {item.label}\n              </a>\n            ))\n          )}\n        </nav>\n\n        <div className=\"flex items-center gap-4\">\n          {/* Language Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleLanguage}\n            data-testid=\"button-language\"\n          >\n            <Globe className=\"w-4 h-4\" />\n          </Button>\n\n          {/* Theme Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleTheme}\n            data-testid=\"button-theme\"\n          >\n            {theme === \"light\" ? (\n              <Moon className=\"w-4 h-4\" />\n            ) : (\n              <Sun className=\"w-4 h-4\" />\n            )}\n          </Button>\n\n          {/* Auth Section */}\n          {isAuthenticated && user ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"user-menu\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user.profileImageUrl || undefined} alt={user.firstName || \"User\"} />\n                    <AvatarFallback>\n                      {user.firstName?.charAt(0) || user.email?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align={isRTL ? \"start\" : \"end\"}>\n                <DropdownMenuItem onClick={() => window.location.href = \"/api/logout\"} data-testid=\"button-logout\">\n                  {t(\"nav.logout\")}\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : (\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => window.location.href = \"/api/login\"}\n                data-testid=\"button-login\"\n              >\n                {t(\"nav.login\")}\n              </Button>\n              <Button\n                onClick={() => window.location.href = \"/api/login\"}\n                data-testid=\"button-signup\"\n              >\n                {t(\"nav.signup\")}\n              </Button>\n            </div>\n          )}\n\n          {/* Mobile Menu */}\n          <div className=\"md:hidden\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"mobile-menu\">\n                  <Menu className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align={isRTL ? \"start\" : \"end\"}>\n                {isAuthenticated ? (\n                  authenticatedNavigation.map((item) => (\n                    <DropdownMenuItem key={item.href} asChild>\n                      <Link href={item.href}>{item.label}</Link>\n                    </DropdownMenuItem>\n                  ))\n                ) : (\n                  navigation.map((item) => (\n                    <DropdownMenuItem key={item.href} asChild>\n                      <a href={item.href}>{item.label}</a>\n                    </DropdownMenuItem>\n                  ))\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6337},"client/src/components/LanguageProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Language = \"ar\" | \"en\";\n\ntype LanguageProviderProps = {\n  children: React.ReactNode;\n  defaultLanguage?: Language;\n  storageKey?: string;\n};\n\ntype LanguageProviderState = {\n  language: Language;\n  setLanguage: (language: Language) => void;\n  t: (key: string) => string;\n  isRTL: boolean;\n};\n\nconst translations = {\n  ar: {\n    // Navigation\n    \"nav.features\": \"المميزات\",\n    \"nav.editor\": \"المحرر\",\n    \"nav.pricing\": \"الأسعار\",\n    \"nav.community\": \"المجتمع\",\n    \"nav.login\": \"تسجيل الدخول\",\n    \"nav.signup\": \"ابدأ مجاناً\",\n    \"nav.dashboard\": \"لوحة التحكم\",\n    \"nav.templates\": \"القوالب\",\n    \"nav.logout\": \"تسجيل الخروج\",\n\n    // Hero section\n    \"hero.subtitle\": \"🚀 منصتك الذكية لإنشاء المواقع والتطبيقات\",\n    \"hero.title\": \"Markode App AI\",\n    \"hero.title.arabic\": \"ماركود\",\n    \"hero.description\": \"اكتب فكرتك فقط ودع الذكاء الاصطناعي يحولها إلى كود جاهز ومشروع متكامل في دقائق!\",\n    \"hero.description.sub\": \"بدون تعقيد، بدون خبرة برمجية.\",\n    \"hero.input.placeholder\": \"اكتب فكرتك هنا...\",\n    \"hero.input.example\": \"أريد موقع للتجارة الإلكترونية مع نظام دفع\",\n    \"hero.button.generate\": \"إنشاء المشروع بالذكاء الاصطناعي\",\n    \"hero.button.start\": \"ابدأ الآن مجاناً\",\n    \"hero.button.demo\": \"شاهد العرض التوضيحي\",\n\n    // Common buttons\n    \"button.create\": \"إنشاء\",\n    \"button.edit\": \"تعديل\",\n    \"button.delete\": \"حذف\",\n    \"button.save\": \"حفظ\",\n    \"button.cancel\": \"إلغاء\",\n    \"button.back\": \"رجوع\",\n    \"button.next\": \"التالي\",\n    \"button.loading\": \"جاري التحميل...\",\n\n    // Dashboard\n    \"dashboard.title\": \"مشاريعي\",\n    \"dashboard.subtitle\": \"إدارة مشاريعك والتحكم بها\",\n    \"dashboard.new.project\": \"مشروع جديد\",\n    \"dashboard.empty.title\": \"لا توجد مشاريع بعد\",\n    \"dashboard.empty.description\": \"ابدأ بإنشاء مشروعك الأول\",\n    \"project.status.draft\": \"مسودة\",\n    \"project.status.building\": \"جاري الإنشاء\",\n    \"project.status.ready\": \"جاهز\",\n    \"project.status.deployed\": \"منشور\",\n    \"project.status.error\": \"خطأ\",\n\n    // Forms\n    \"form.project.name\": \"اسم المشروع\",\n    \"form.project.description\": \"وصف المشروع\",\n    \"form.project.prompt\": \"اكتب فكرة مشروعك\",\n    \"form.project.framework\": \"إطار العمل\",\n    \"form.project.language\": \"لغة البرمجة\",\n    \"form.validation.required\": \"هذا الحقل مطلوب\",\n    \"form.validation.min\": \"يجب أن يكون النص أطول\",\n\n    // Templates\n    \"templates.title\": \"القوالب الجاهزة\",\n    \"templates.subtitle\": \"ابدأ بسرعة باستخدام قوالب احترافية\",\n    \"template.use\": \"استخدم القالب\",\n    \"template.preview\": \"معاينة\",\n\n    // Footer\n    \"footer.product\": \"المنتج\",\n    \"footer.support\": \"الدعم\",\n    \"footer.company\": \"الشركة\",\n    \"footer.rights\": \"جميع الحقوق محفوظة\",\n  },\n  en: {\n    // Navigation\n    \"nav.features\": \"Features\",\n    \"nav.editor\": \"Editor\",\n    \"nav.pricing\": \"Pricing\",\n    \"nav.community\": \"Community\",\n    \"nav.login\": \"Login\",\n    \"nav.signup\": \"Get Started\",\n    \"nav.dashboard\": \"Dashboard\",\n    \"nav.templates\": \"Templates\",\n    \"nav.logout\": \"Logout\",\n\n    // Hero section\n    \"hero.subtitle\": \"🚀 Your smart platform for creating websites and apps\",\n    \"hero.title\": \"Markode App AI\",\n    \"hero.title.arabic\": \"ماركود\",\n    \"hero.description\": \"Just write your idea and let AI turn it into ready code and a complete project in minutes!\",\n    \"hero.description.sub\": \"No complexity, no programming experience needed.\",\n    \"hero.input.placeholder\": \"Write your idea here...\",\n    \"hero.input.example\": \"I want an e-commerce website with payment system\",\n    \"hero.button.generate\": \"Generate Project with AI\",\n    \"hero.button.start\": \"Start Now For Free\",\n    \"hero.button.demo\": \"Watch Demo\",\n\n    // Common buttons\n    \"button.create\": \"Create\",\n    \"button.edit\": \"Edit\",\n    \"button.delete\": \"Delete\",\n    \"button.save\": \"Save\",\n    \"button.cancel\": \"Cancel\",\n    \"button.back\": \"Back\",\n    \"button.next\": \"Next\",\n    \"button.loading\": \"Loading...\",\n\n    // Dashboard\n    \"dashboard.title\": \"My Projects\",\n    \"dashboard.subtitle\": \"Manage and control your projects\",\n    \"dashboard.new.project\": \"New Project\",\n    \"dashboard.empty.title\": \"No projects yet\",\n    \"dashboard.empty.description\": \"Start by creating your first project\",\n    \"project.status.draft\": \"Draft\",\n    \"project.status.building\": \"Building\",\n    \"project.status.ready\": \"Ready\",\n    \"project.status.deployed\": \"Deployed\",\n    \"project.status.error\": \"Error\",\n\n    // Forms\n    \"form.project.name\": \"Project Name\",\n    \"form.project.description\": \"Project Description\",\n    \"form.project.prompt\": \"Describe your project idea\",\n    \"form.project.framework\": \"Framework\",\n    \"form.project.language\": \"Programming Language\",\n    \"form.validation.required\": \"This field is required\",\n    \"form.validation.min\": \"Text must be longer\",\n\n    // Templates\n    \"templates.title\": \"Ready Templates\",\n    \"templates.subtitle\": \"Start quickly with professional templates\",\n    \"template.use\": \"Use Template\",\n    \"template.preview\": \"Preview\",\n\n    // Footer\n    \"footer.product\": \"Product\",\n    \"footer.support\": \"Support\",\n    \"footer.company\": \"Company\",\n    \"footer.rights\": \"All rights reserved\",\n  },\n};\n\nconst initialState: LanguageProviderState = {\n  language: \"ar\",\n  setLanguage: () => null,\n  t: () => \"\",\n  isRTL: true,\n};\n\nconst LanguageProviderContext = createContext<LanguageProviderState>(initialState);\n\nexport function LanguageProvider({\n  children,\n  defaultLanguage = \"ar\",\n  storageKey = \"markode-language\",\n  ...props\n}: LanguageProviderProps) {\n  const [language, setLanguage] = useState<Language>(\n    () => (localStorage.getItem(storageKey) as Language) || defaultLanguage\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    const body = window.document.body;\n\n    root.lang = language;\n    root.dir = language === \"ar\" ? \"rtl\" : \"ltr\";\n    \n    // Set appropriate font family\n    if (language === \"ar\") {\n      body.style.fontFamily = \"var(--font-arabic)\";\n    } else {\n      body.style.fontFamily = \"var(--font-sans)\";\n    }\n  }, [language]);\n\n  const t = (key: string): string => {\n    return translations[language][key as keyof typeof translations[typeof language]] || key;\n  };\n\n  const value = {\n    language,\n    setLanguage: (language: Language) => {\n      localStorage.setItem(storageKey, language);\n      setLanguage(language);\n    },\n    t,\n    isRTL: language === \"ar\",\n  };\n\n  return (\n    <LanguageProviderContext.Provider {...props} value={value}>\n      {children}\n    </LanguageProviderContext.Provider>\n  );\n}\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n\n  return context;\n};\n","size_bytes":7387},"client/src/components/ProjectCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Code2, \n  Calendar, \n  ExternalLink, \n  Edit, \n  Trash2,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Loader2\n} from \"lucide-react\";\nimport type { Project } from \"@shared/schema\";\nimport { useLanguage } from \"./LanguageProvider\";\nimport { Link } from \"wouter\";\n\ninterface ProjectCardProps {\n  project: Project;\n  onDelete?: (id: string) => void;\n}\n\nconst statusIcons = {\n  draft: Clock,\n  building: Loader2,\n  ready: CheckCircle,\n  deployed: ExternalLink,\n  error: AlertCircle,\n};\n\nconst statusColors = {\n  draft: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100\",\n  building: \"bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100\",\n  ready: \"bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\",\n  deployed: \"bg-purple-100 text-purple-800 dark:bg-purple-800 dark:text-purple-100\",\n  error: \"bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100\",\n};\n\nexport function ProjectCard({ project, onDelete }: ProjectCardProps) {\n  const { t } = useLanguage();\n  const StatusIcon = statusIcons[project.status as keyof typeof statusIcons];\n\n  return (\n    <Card className=\"feature-card h-full flex flex-col\" data-testid={`project-card-${project.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-semibold text-lg truncate mb-1\" data-testid=\"project-name\">\n              {project.name}\n            </h3>\n            <p className=\"text-muted-foreground text-sm line-clamp-2\" data-testid=\"project-description\">\n              {project.description}\n            </p>\n          </div>\n          <Badge className={`ml-2 ${statusColors[project.status as keyof typeof statusColors]}`}>\n            <StatusIcon className=\"w-3 h-3 mr-1\" />\n            {t(`project.status.${project.status}`)}\n          </Badge>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-1\">\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          <Badge variant=\"outline\" className=\"text-xs\">\n            <Code2 className=\"w-3 h-3 mr-1\" />\n            {project.framework}\n          </Badge>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {project.language}\n          </Badge>\n        </div>\n\n        <div className=\"flex items-center text-xs text-muted-foreground\">\n          <Calendar className=\"w-3 h-3 mr-1\" />\n          {project.createdAt ? new Date(project.createdAt).toLocaleDateString('ar-SA') : t('date.unknown')}\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex gap-2 pt-4 border-t\">\n        <Link href={`/editor/${project.id}`} className=\"flex-1\">\n          <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-edit\">\n            <Edit className=\"w-4 h-4 mr-2\" />\n            {t(\"button.edit\")}\n          </Button>\n        </Link>\n        \n        {project.deployUrl && (\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={() => project.deployUrl && window.open(project.deployUrl, '_blank')}\n            data-testid=\"button-preview\"\n          >\n            <ExternalLink className=\"w-4 h-4\" />\n          </Button>\n        )}\n        \n        {onDelete && (\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={() => onDelete(project.id)}\n            className=\"text-destructive hover:text-destructive-foreground hover:bg-destructive\"\n            data-testid=\"button-delete\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </Button>\n        )}\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":3798},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"markode-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1371},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Search, Filter } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLanguage } from \"@/components/LanguageProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ProjectCard } from \"@/components/ProjectCard\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Project, CreateProjectForm } from \"@shared/schema\";\nimport { createProjectFormSchema } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { t, isRTL } = useLanguage();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const form = useForm<CreateProjectForm>({\n    resolver: zodResolver(createProjectFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      prompt: \"\",\n      framework: \"react\",\n      language: \"javascript\",\n    },\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: projects = [], isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n    retry: false,\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: CreateProjectForm) => {\n      console.log(\"Creating project with data:\", data);\n      const response = await apiRequest(\"POST\", \"/api/projects\", data);\n      const result = await response.json();\n      console.log(\"Project creation response:\", result);\n      return result;\n    },\n    onSuccess: (data) => {\n      console.log(\"Project created successfully:\", data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"نجح إنشاء المشروع\",\n        description: \"سيتم إنشاء الكود تلقائياً في الخلفية\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"خطأ في إنشاء المشروع\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deployProjectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"POST\", `/api/projects/${id}/deploy`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({ title: \"تم نشر المشروع بنجاح\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ في النشر\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProjectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/projects/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"تم حذف المشروع بنجاح\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"خطأ في حذف المشروع\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateProjectForm) => {\n    console.log(\"onSubmit called with data:\", data);\n    console.log(\"Form validation state:\", form.formState);\n    console.log(\"Form errors:\", form.formState.errors);\n    createProjectMutation.mutate(data);\n  };\n\n  const filteredProjects = projects.filter((project) => {\n    const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         project.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || project.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">جاري التحميل...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\" data-testid=\"dashboard-page\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4 mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"dashboard-title\">\n            {t(\"dashboard.title\")}\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"dashboard-subtitle\">\n            {t(\"dashboard.subtitle\")}\n          </p>\n        </div>\n\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-project\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              {t(\"dashboard.new.project\")}\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{t(\"dashboard.new.project\")}</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t(\"form.project.name\")}</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-project-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"framework\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t(\"form.project.framework\")}</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value || \"react\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-framework\">\n                              <SelectValue placeholder=\"اختر إطار العمل\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"react\">React</SelectItem>\n                            <SelectItem value=\"vue\">Vue.js</SelectItem>\n                            <SelectItem value=\"angular\">Angular</SelectItem>\n                            <SelectItem value=\"svelte\">Svelte</SelectItem>\n                            <SelectItem value=\"nodejs\">Node.js</SelectItem>\n                            <SelectItem value=\"python\">Python</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"language\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t(\"form.project.language\")}</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value || \"javascript\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-language\">\n                            <SelectValue placeholder=\"اختر لغة البرمجة\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                          <SelectItem value=\"typescript\">TypeScript</SelectItem>\n                          <SelectItem value=\"python\">Python</SelectItem>\n                          <SelectItem value=\"php\">PHP</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t(\"form.project.description\")}</FormLabel>\n                      <FormControl>\n                        <Input {...field} value={field.value || \"\"} data-testid=\"input-project-description\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"prompt\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t(\"form.project.prompt\")}</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"اكتب وصف مفصل لمشروعك بالعربية أو الإنجليزية...\"\n                          rows={4}\n                          className={isRTL ? \"text-right\" : \"text-left\"}\n                          data-testid=\"textarea-project-prompt\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2 justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    {t(\"button.cancel\")}\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createProjectMutation.isPending}\n                    data-testid=\"button-create-project\"\n                    onClick={() => {\n                      console.log(\"Submit button clicked\");\n                      console.log(\"Form is valid:\", form.formState.isValid);\n                      console.log(\"Form values:\", form.getValues());\n                      console.log(\"Form errors:\", form.formState.errors);\n                    }}\n                  >\n                    {createProjectMutation.isPending ? t(\"button.loading\") : t(\"button.create\")}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n        <div className=\"flex-1 relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"البحث في المشاريع...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search\"\n          />\n        </div>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"md:w-48\" data-testid=\"select-status-filter\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">جميع الحالات</SelectItem>\n            <SelectItem value=\"draft\">مسودة</SelectItem>\n            <SelectItem value=\"building\">جاري الإنشاء</SelectItem>\n            <SelectItem value=\"ready\">جاهز</SelectItem>\n            <SelectItem value=\"deployed\">منشور</SelectItem>\n            <SelectItem value=\"error\">خطأ</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Projects Grid */}\n      {projectsLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : filteredProjects.length === 0 ? (\n        <Card className=\"text-center py-12\" data-testid=\"empty-state\">\n          <CardContent>\n            <div className=\"mb-4\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Plus className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">{t(\"dashboard.empty.title\")}</h3>\n              <p className=\"text-muted-foreground mb-6\">{t(\"dashboard.empty.description\")}</p>\n            </div>\n            <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-create-first\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              {t(\"dashboard.new.project\")}\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredProjects.map((project) => (\n            <ProjectCard\n              key={project.id}\n              project={project}\n              onDelete={(id) => deleteProjectMutation.mutate(id)}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":15827},"client/src/pages/Editor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { CodeEditor } from \"@/components/CodeEditor\";\nimport { useLanguage } from \"@/components/LanguageProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Project } from \"@shared/schema\";\nimport {\n  Play,\n  Save,\n  Download,\n  Upload,\n  Settings,\n  Eye,\n  Code2,\n  FileText,\n  Folder,\n  ChevronRight,\n  Loader2,\n  AlertTriangle,\n  CheckCircle,\n  ExternalLink,\n  Wand2\n} from \"lucide-react\";\n\ninterface GeneratedCode {\n  files: Record<string, string>;\n  framework: string;\n  language: string;\n  deploymentInstructions: string;\n}\n\ninterface ImproveCodeResponse {\n  improvedCode: string;\n}\n\nexport default function Editor() {\n  const { id } = useParams();\n  const { t, isRTL } = useLanguage();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeFile, setActiveFile] = useState<string>(\"\");\n  const [fileContents, setFileContents] = useState<Record<string, string>>({});\n  const [improveDialogOpen, setImproveDialogOpen] = useState(false);\n  const [improvementRequest, setImprovementRequest] = useState(\"\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: project, isLoading: projectLoading } = useQuery<Project>({\n    queryKey: [\"/api/projects\", id],\n    retry: false,\n    enabled: !!id && isAuthenticated,\n  });\n\n  const updateProjectMutation = useMutation({\n    mutationFn: async (updates: Partial<Project>) => {\n      const response = await apiRequest(\"PUT\", `/api/projects/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", id] });\n      toast({\n        title: \"تم حفظ المشروع بنجاح\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"خطأ في حفظ المشروع\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const improveCodeMutation = useMutation<ImproveCodeResponse, Error, { filename: string; code: string; improvements: string }>({ \n    mutationFn: async ({ code, improvements }) => {\n      const response = await apiRequest(\"POST\", `/api/projects/${id}/improve`, {\n        code,\n        improvements,\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      if (data.improvedCode) {\n        // Update file contents using functional update to avoid stale closure\n        setFileContents(prev => {\n          const nextFiles = {\n            ...prev,\n            [variables.filename]: data.improvedCode,\n          };\n          \n          // Auto-save the improved code using the latest state\n          if (project) {\n            const updatedSourceCode = {\n              ...(project.sourceCode as GeneratedCode || {}),\n              files: nextFiles,\n            };\n            updateProjectMutation.mutate({ sourceCode: updatedSourceCode });\n          }\n          \n          return nextFiles;\n        });\n        \n        toast({\n          title: \"تم تحسين الكود بنجاح\",\n          description: \"تم تطبيق التحسينات وحفظها تلقائياً\",\n        });\n        setImproveDialogOpen(false);\n        setImprovementRequest(\"\");\n      } else {\n        toast({\n          title: \"خطأ في تحسين الكود\",\n          description: \"لم يتم إرجاع كود محسّن. يرجى المحاولة مرة أخرى\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"خطأ في تحسين الكود\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize file contents when project loads\n  useEffect(() => {\n    if (project?.sourceCode) {\n      const generatedCode = project.sourceCode as GeneratedCode;\n      setFileContents(generatedCode.files || {});\n      \n      // Set first file as active\n      const firstFile = Object.keys(generatedCode.files || {})[0];\n      if (firstFile && !activeFile) {\n        setActiveFile(firstFile);\n      }\n    }\n  }, [project, activeFile]);\n\n  const handleSave = () => {\n    if (project && fileContents) {\n      const updatedSourceCode = {\n        ...(project.sourceCode as GeneratedCode || {}),\n        files: fileContents,\n      };\n      updateProjectMutation.mutate({ sourceCode: updatedSourceCode });\n    }\n  };\n\n  const handleFileChange = (filename: string, content: string | undefined) => {\n    if (content !== undefined) {\n      setFileContents(prev => ({\n        ...prev,\n        [filename]: content,\n      }));\n    }\n  };\n\n  const handleImproveCode = () => {\n    if (!activeFile || !fileContents[activeFile]) {\n      toast({\n        title: \"اختر ملف أولاً\",\n        description: \"يجب اختيار ملف وفتحه في المحرر قبل تحسين الكود\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!improvementRequest.trim()) {\n      toast({\n        title: \"أدخل متطلبات التحسين\",\n        description: \"يجب كتابة وصف للتحسينات المطلوبة\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    improveCodeMutation.mutate({\n      filename: activeFile,\n      code: fileContents[activeFile],\n      improvements: improvementRequest,\n    });\n  };\n\n  const getFileIcon = (filename: string) => {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    switch (ext) {\n      case 'js':\n      case 'jsx':\n      case 'ts':\n      case 'tsx':\n        return <Code2 className=\"w-4 h-4 text-yellow-500\" />;\n      case 'html':\n        return <FileText className=\"w-4 h-4 text-orange-500\" />;\n      case 'css':\n        return <FileText className=\"w-4 h-4 text-blue-500\" />;\n      case 'json':\n        return <FileText className=\"w-4 h-4 text-green-500\" />;\n      default:\n        return <FileText className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getLanguageFromFile = (filename: string): string => {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    switch (ext) {\n      case 'js':\n      case 'jsx':\n        return 'javascript';\n      case 'ts':\n      case 'tsx':\n        return 'typescript';\n      case 'html':\n        return 'html';\n      case 'css':\n        return 'css';\n      case 'json':\n        return 'json';\n      case 'py':\n        return 'python';\n      case 'php':\n        return 'php';\n      default:\n        return 'plaintext';\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      draft: { label: \"مسودة\", color: \"bg-gray-100 text-gray-800\", icon: FileText },\n      building: { label: \"جاري الإنشاء\", color: \"bg-blue-100 text-blue-800\", icon: Loader2 },\n      ready: { label: \"جاهز\", color: \"bg-green-100 text-green-800\", icon: CheckCircle },\n      deployed: { label: \"منشور\", color: \"bg-purple-100 text-purple-800\", icon: ExternalLink },\n      error: { label: \"خطأ\", color: \"bg-red-100 text-red-800\", icon: AlertTriangle },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig];\n    const StatusIcon = config.icon;\n\n    return (\n      <Badge className={`${config.color} border-0`}>\n        <StatusIcon className=\"w-3 h-3 mr-1\" />\n        {config.label}\n      </Badge>\n    );\n  };\n\n  if (isLoading || projectLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-primary\" />\n          <p className=\"text-muted-foreground\">جاري تحميل المشروع...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <AlertTriangle className=\"w-12 h-12 text-yellow-500 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">المشروع غير موجود</h2>\n            <p className=\"text-muted-foreground\">لم يتم العثور على هذا المشروع أو ليس لديك صلاحية للوصول إليه.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const sourceCode = project.sourceCode as GeneratedCode;\n  const files = sourceCode?.files || {};\n  const fileList = Object.keys(files);\n\n  return (\n    <div className=\"h-screen flex flex-col\" data-testid=\"editor-page\">\n      {/* Header */}\n      <div className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <div>\n                <h1 className=\"text-xl font-semibold\" data-testid=\"project-title\">\n                  {project.name}\n                </h1>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  {getStatusBadge(project.status || 'draft')}\n                  <Badge variant=\"outline\">{project.framework}</Badge>\n                  <Badge variant=\"outline\">{project.language}</Badge>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleSave}\n                disabled={updateProjectMutation.isPending}\n                data-testid=\"button-save\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {updateProjectMutation.isPending ? \"جاري الحفظ...\" : \"حفظ\"}\n              </Button>\n              \n              {project.deployUrl && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => project.deployUrl && window.open(project.deployUrl, '_blank')}\n                  data-testid=\"button-preview\"\n                >\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  معاينة\n                </Button>\n              )}\n              \n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-deploy\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                نشر\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 flex\">\n        {/* Sidebar */}\n        <div className=\"w-64 bg-muted/30 border-r flex flex-col\" data-testid=\"file-explorer\">\n          <div className=\"p-4 border-b\">\n            <h3 className=\"font-medium text-sm text-muted-foreground\">مستكشف الملفات</h3>\n          </div>\n          \n          <div className=\"flex-1 overflow-auto\">\n            {fileList.length === 0 ? (\n              <div className=\"p-4 text-center text-muted-foreground text-sm\">\n                لا توجد ملفات\n              </div>\n            ) : (\n              <div className=\"p-2\">\n                {fileList.map((filename) => (\n                  <button\n                    key={filename}\n                    onClick={() => setActiveFile(filename)}\n                    className={`w-full flex items-center gap-2 p-2 rounded-md text-sm hover:bg-accent hover:text-accent-foreground transition-colors ${\n                      activeFile === filename ? 'bg-accent text-accent-foreground' : ''\n                    }`}\n                    data-testid={`file-${filename}`}\n                  >\n                    {getFileIcon(filename)}\n                    <span className=\"truncate\">{filename}</span>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Main Editor */}\n        <div className=\"flex-1 flex flex-col\">\n          {activeFile ? (\n            <>\n              {/* File Tabs */}\n              <div className=\"border-b bg-muted/10\">\n                <div className=\"flex items-center px-4 py-2\">\n                  <div className=\"flex items-center gap-2\">\n                    {getFileIcon(activeFile)}\n                    <span className=\"text-sm font-medium\" data-testid=\"active-file-name\">\n                      {activeFile}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Editor */}\n              <div className=\"flex-1\">\n                <CodeEditor\n                  value={fileContents[activeFile] || \"\"}\n                  onChange={(content) => handleFileChange(activeFile, content)}\n                  language={getLanguageFromFile(activeFile)}\n                  height=\"100%\"\n                />\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center text-muted-foreground\">\n                <Code2 className=\"w-12 h-12 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">اختر ملف للتحرير</h3>\n                <p className=\"text-sm\">اختر ملف من مستكشف الملفات لبدء التحرير</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Right Panel */}\n        <div className=\"w-80 bg-muted/30 border-l\">\n          <Tabs defaultValue=\"info\" className=\"h-full flex flex-col\">\n            <div className=\"border-b\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"info\">معلومات</TabsTrigger>\n                <TabsTrigger value=\"preview\">معاينة</TabsTrigger>\n                <TabsTrigger value=\"settings\">إعدادات</TabsTrigger>\n              </TabsList>\n            </div>\n            \n            <div className=\"flex-1 overflow-auto\">\n              <TabsContent value=\"info\" className=\"p-4 space-y-4\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">وصف المشروع</h4>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"project-description\">\n                    {project.description || \"لا يوجد وصف\"}\n                  </p>\n                </div>\n                \n                <Separator />\n                \n                <div>\n                  <h4 className=\"font-medium mb-2\">التقنيات المستخدمة</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Badge variant=\"outline\">{project.framework}</Badge>\n                    <Badge variant=\"outline\">{project.language}</Badge>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div>\n                  <h4 className=\"font-medium mb-2\">إحصائيات الملفات</h4>\n                  <div className=\"text-sm text-muted-foreground space-y-1\">\n                    <div>عدد الملفات: {fileList.length}</div>\n                    <div>إجمالي الأسطر: {Object.values(files).reduce((acc, content) => acc + content.split('\\n').length, 0)}</div>\n                  </div>\n                </div>\n                \n                {sourceCode?.deploymentInstructions && (\n                  <>\n                    <Separator />\n                    <div>\n                      <h4 className=\"font-medium mb-2\">تعليمات النشر</h4>\n                      <pre className=\"text-xs bg-muted p-3 rounded-md overflow-auto whitespace-pre-wrap\">\n                        {sourceCode.deploymentInstructions}\n                      </pre>\n                    </div>\n                  </>\n                )}\n              </TabsContent>\n              \n              <TabsContent value=\"preview\" className=\"p-4\">\n                <div className=\"text-center text-muted-foreground\">\n                  <Eye className=\"w-12 h-12 mx-auto mb-4\" />\n                  <h4 className=\"font-medium mb-2\">المعاينة المباشرة</h4>\n                  <p className=\"text-sm mb-4\">قريباً - ستتمكن من معاينة مشروعك مباشرة هنا</p>\n                  {project.deployUrl && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => project.deployUrl && window.open(project.deployUrl, '_blank')}\n                      data-testid=\"button-open-preview\"\n                    >\n                      <ExternalLink className=\"w-4 h-4 mr-2\" />\n                      فتح في نافذة جديدة\n                    </Button>\n                  )}\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"settings\" className=\"p-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium mb-2\">إعدادات المشروع</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">عام</span>\n                        <input type=\"checkbox\" checked={project.isPublic || false} />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">النشر التلقائي</span>\n                        <input type=\"checkbox\" />\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div>\n                    <h4 className=\"font-medium mb-2\">إجراءات</h4>\n                    <div className=\"space-y-2\">\n                      <Dialog open={improveDialogOpen} onOpenChange={setImproveDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"w-full justify-start\"\n                            disabled={!activeFile || improveCodeMutation.isPending}\n                            data-testid=\"button-improve-code\"\n                          >\n                            <Wand2 className=\"w-4 h-4 mr-2\" />\n                            {improveCodeMutation.isPending ? \"جاري التحسين...\" : \"تحسين الكود\"}\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[525px]\">\n                          <DialogHeader>\n                            <DialogTitle>تحسين الكود باستخدام الذكاء الاصطناعي</DialogTitle>\n                            <DialogDescription>\n                              اكتب وصفاً للتحسينات التي تريد تطبيقها على الملف المحدد: {activeFile}\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"grid gap-4 py-4\">\n                            <div className=\"grid gap-2\">\n                              <Label htmlFor=\"improvements\">متطلبات التحسين</Label>\n                              <Textarea\n                                id=\"improvements\"\n                                placeholder=\"مثال: أضف دعم للغة العربية، حسن الأداء، أضف معالجة الأخطاء...\"\n                                value={improvementRequest}\n                                onChange={(e) => setImprovementRequest(e.target.value)}\n                                className=\"min-h-[100px]\"\n                                data-testid=\"textarea-improvements\"\n                              />\n                            </div>\n                          </div>\n                          <DialogFooter>\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => {\n                                setImproveDialogOpen(false);\n                                setImprovementRequest(\"\");\n                              }}\n                              disabled={improveCodeMutation.isPending}\n                              data-testid=\"button-cancel-improvement\"\n                            >\n                              إلغاء\n                            </Button>\n                            <Button\n                              onClick={handleImproveCode}\n                              disabled={improveCodeMutation.isPending || !improvementRequest.trim()}\n                              data-testid=\"button-submit-improvement\"\n                            >\n                              {improveCodeMutation.isPending ? (\n                                <>\n                                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                                  جاري التحسين...\n                                </>\n                              ) : (\n                                \"تحسين الكود\"\n                              )}\n                            </Button>\n                          </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        تحميل المشروع\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                        <Settings className=\"w-4 h-4 mr-2\" />\n                        إعدادات متقدمة\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23667},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLanguage } from \"@/components/LanguageProvider\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { \n  Sparkles, \n  Play, \n  Video, \n  Server, \n  Languages, \n  Users, \n  GitBranch, \n  CreditCard,\n  Star,\n  Rocket,\n  Calendar,\n  CheckCircle\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const { t } = useLanguage();\n  const [projectIdea, setProjectIdea] = useState(\"\");\n  const [, setLocation] = useLocation();\n\n  const features = [\n    {\n      icon: Sparkles,\n      title: \"توليد ذكي للمشاريع\",\n      description: \"يحول الذكاء الاصطناعي فكرتك المكتوبة بالعربية أو الإنجليزية إلى مشروع متكامل مع كود نظيف وتصميم احترافي.\",\n      color: \"text-primary\"\n    },\n    {\n      icon: Server,\n      title: \"استضافة فورية\",\n      description: \"انشر مشروعك على الإنترنت بنقرة واحدة مع خدمة استضافة سريعة وموثوقة مع شهادات SSL مجانية.\",\n      color: \"text-accent\"\n    },\n    {\n      icon: Languages,\n      title: \"دعم كامل للعربية\",\n      description: \"واجهة عربية بالكامل مع دعم الكتابة من اليمين لليسار وتوليد مشاريع بالمحتوى العربي.\",\n      color: \"text-purple-500\"\n    },\n    {\n      icon: Users,\n      title: \"مجتمع تفاعلي\",\n      description: \"انضم لمجتمع المطورين العرب، شارك مشاريعك، واحصل على تقييمات ومساعدة من الخبراء.\",\n      color: \"text-blue-500\"\n    },\n    {\n      icon: GitBranch,\n      title: \"تكامل Git\",\n      description: \"متصل مباشرة مع GitHub و GitLab لإدارة النسخ وتتبع التغييرات والتعاون مع الفريق.\",\n      color: \"text-green-500\"\n    },\n    {\n      icon: CreditCard,\n      title: \"نظام دفع آمن\",\n      description: \"ادفع بأمان عبر Visa وMasterCard وInstaPay مع حماية كاملة لبياناتك المالية.\",\n      color: \"text-orange-500\"\n    }\n  ];\n\n  const templates = [\n    {\n      id: \"restaurant\",\n      name: \"موقع مطعم\",\n      description: \"قالب احترافي للمطاعم مع قائمة طعام ونظام حجز\",\n      framework: \"React + Node.js\",\n      image: \"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n    },\n    {\n      id: \"portfolio\",\n      name: \"معرض أعمال\",\n      description: \"قالب أنيق لعرض أعمالك الإبداعية والمهنية\",\n      framework: \"Next.js\",\n      image: \"https://images.unsplash.com/photo-1467232004584-a241de8bcf5d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n    },\n    {\n      id: \"fitness\",\n      name: \"تطبيق لياقة\",\n      description: \"تطبيق موبايل متكامل لتتبع اللياقة البدنية\",\n      framework: \"Flutter\",\n      image: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n    }\n  ];\n\n  const testimonials = [\n    {\n      name: \"أحمد محمد\",\n      role: \"مطور فريلانسر\",\n      content: \"ماركود غيّر طريقة عملي تماماً. أصبحت أنجز المشاريع في ربع الوقت المعتاد وبجودة أعلى. الذكاء الاصطناعي يفهم ما أريده بالعربية.\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"\n    },\n    {\n      name: \"فاطمة السالم\",\n      role: \"مؤسسة شركة ناشئة\",\n      content: \"لولا ماركود لما استطعت إطلاق متجري الإلكتروني بهذه السرعة. المنصة سهلة جداً وتوفر كل ما أحتاجه من استضافة وأمان.\",\n      image: \"https://images.unsplash.com/photo-1494790108755-2616b332e234?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"\n    },\n    {\n      name: \"عمر التميمي\",\n      role: \"طالب جامعي\",\n      content: \"كطالب في علوم الحاسوب، ماركود ساعدني أفهم البرمجة بشكل أفضل من خلال رؤية كيف يتم توليد الكود. أنصح به جداً.\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"\n    }\n  ];\n\n  const pricingPlans = [\n    {\n      name: \"مجاني\",\n      price: \"0\",\n      period: \"شهرياً\",\n      description: \"مثالي للمبتدئين والطلاب\",\n      features: [\n        \"3 مشاريع شهرياً\",\n        \"استضافة أساسية\", \n        \"قوالب محدودة\",\n        \"دعم المجتمع\",\n        \"مساحة تخزين 1GB\"\n      ],\n      buttonText: \"ابدأ مجاناً\",\n      popular: false,\n      ctaAction: () => setLocation(\"/login\")\n    },\n    {\n      name: \"احترافي\",\n      price: \"49\",\n      period: \"شهرياً\",\n      description: \"للمطورين والشركات الصغيرة\",\n      features: [\n        \"مشاريع غير محدودة\",\n        \"استضافة سريعة\",\n        \"جميع القوالب\",\n        \"دعم أولوية\",\n        \"مساحة تخزين 50GB\",\n        \"نطاق مخصص\",\n        \"تحليلات متقدمة\"\n      ],\n      buttonText: \"جرب 14 يوم مجاناً\",\n      popular: true,\n      ctaAction: () => setLocation(\"/login\")\n    },\n    {\n      name: \"مؤسسي\",\n      price: \"199\",\n      period: \"شهرياً\",\n      description: \"للفرق الكبيرة والمؤسسات\",\n      features: [\n        \"مشاريع غير محدودة\",\n        \"استضافة enterprise\",\n        \"دعم مخصص 24/7\",\n        \"إدارة الفريق\",\n        \"مساحة تخزين 500GB\",\n        \"نطاقات متعددة\",\n        \"API متقدم\",\n        \"SLA مضمون\"\n      ],\n      buttonText: \"تواصل معنا\",\n      popular: false,\n      ctaAction: () => setLocation(\"/contact\")\n    }\n  ];\n\n  const handleGenerateProject = () => {\n    if (projectIdea.trim()) {\n      setLocation(\"/login\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"py-20 gradient-bg\" data-testid=\"hero-section\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <div className=\"mb-6\">\n              <Badge className=\"px-4 py-2 bg-white/10 text-white border-0\" data-testid=\"hero-badge\">\n                {t(\"hero.subtitle\")}\n              </Badge>\n            </div>\n\n            <h1 className=\"text-5xl md:text-6xl font-bold text-white mb-6 leading-tight\" data-testid=\"hero-title\">\n              {t(\"hero.title\")}\n              <span className=\"block text-4xl md:text-5xl mt-2\">\n                {t(\"hero.title.arabic\")}\n              </span>\n            </h1>\n\n            <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto leading-relaxed\" data-testid=\"hero-description\">\n              {t(\"hero.description\")}\n              <span className=\"block mt-2\">{t(\"hero.description.sub\")}</span>\n            </p>\n\n            {/* AI Input Demo */}\n            <div className=\"max-w-2xl mx-auto mb-8\">\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-right text-white/80 text-sm mb-2\">✨ اكتب فكرتك هنا:</div>\n                  <div className=\"mb-4\">\n                    <Input\n                      value={projectIdea}\n                      onChange={(e) => setProjectIdea(e.target.value)}\n                      placeholder={t(\"hero.input.example\")}\n                      className=\"bg-white/5 border-white/20 text-white placeholder:text-white/60 text-right\"\n                      data-testid=\"input-project-idea\"\n                    />\n                  </div>\n                  <Button \n                    onClick={handleGenerateProject}\n                    className=\"w-full bg-accent hover:bg-accent/90 text-accent-foreground\"\n                    data-testid=\"button-generate-project\"\n                  >\n                    <Sparkles className=\"w-4 h-4 mr-2\" />\n                    {t(\"hero.button.generate\")}\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4 mb-16\">\n              <Button\n                size=\"lg\"\n                className=\"bg-white text-primary hover:bg-white/90\"\n                onClick={() => setLocation(\"/login\")}\n                data-testid=\"button-start-free\"\n              >\n                <Play className=\"w-4 h-4 mr-2\" />\n                {t(\"hero.button.start\")}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-white/30 text-white hover:bg-white/10\"\n                data-testid=\"button-demo\"\n              >\n                <Video className=\"w-4 h-4 mr-2\" />\n                {t(\"hero.button.demo\")}\n              </Button>\n            </div>\n\n            {/* Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 pt-8 border-t border-white/20\">\n              <div className=\"text-center\" data-testid=\"stat-projects\">\n                <div className=\"text-3xl font-bold text-white\">10K+</div>\n                <div className=\"text-white/80 text-sm\">مشروع تم إنشاؤه</div>\n              </div>\n              <div className=\"text-center\" data-testid=\"stat-developers\">\n                <div className=\"text-3xl font-bold text-white\">5K+</div>\n                <div className=\"text-white/80 text-sm\">مطور نشط</div>\n              </div>\n              <div className=\"text-center\" data-testid=\"stat-uptime\">\n                <div className=\"text-3xl font-bold text-white\">99.9%</div>\n                <div className=\"text-white/80 text-sm\">وقت التشغيل</div>\n              </div>\n              <div className=\"text-center\" data-testid=\"stat-support\">\n                <div className=\"text-3xl font-bold text-white\">24/7</div>\n                <div className=\"text-white/80 text-sm\">دعم فني</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-background\" data-testid=\"features-section\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">⚡ مميزات المنصة</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              كل ما تحتاجه لتحويل فكرتك إلى منتج رقمي متكامل\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"feature-card p-6\" data-testid={`feature-card-${index}`}>\n                <CardContent className=\"p-0\">\n                  <div className={`w-12 h-12 rounded-lg flex items-center justify-center mb-4 ${feature.color.replace('text-', 'bg-')}/10`}>\n                    <feature.icon className={`w-6 h-6 ${feature.color}`} />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3\">{feature.title}</h3>\n                  <p className=\"text-muted-foreground leading-relaxed\">\n                    {feature.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Code Editor Section */}\n      <section id=\"editor\" className=\"py-20 bg-muted/30\" data-testid=\"editor-section\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">🖥️ محرر أكواد عصري</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              واجهة تشبه Replit لكن أبسط وأوضح، مع دعم للغات برمجة وإطارات عمل متعددة\n            </p>\n          </div>\n\n          <div className=\"max-w-6xl mx-auto\">\n            <Card className=\"code-editor-bg rounded-lg shadow-2xl overflow-hidden\">\n              {/* Browser header */}\n              <div className=\"bg-gray-800 px-4 py-3 flex items-center gap-3\">\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                </div>\n                <div className=\"flex-1 text-center\">\n                  <span className=\"text-gray-300 text-sm\">markode.app/editor</span>\n                </div>\n              </div>\n\n              {/* Editor preview */}\n              <div className=\"flex h-96\">\n                <div className=\"w-64 bg-gray-900 border-r border-gray-700 p-4\">\n                  <h3 className=\"text-white font-medium text-sm mb-2\">مشروع متجر إلكتروني</h3>\n                  <p className=\"text-gray-400 text-xs mb-4\">React + Node.js</p>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-gray-300 text-sm\">📁 src</div>\n                    <div className=\"text-gray-300 text-sm pl-4\">📄 App.js</div>\n                    <div className=\"text-white text-sm pl-4 bg-gray-800 p-1 rounded\">📄 ProductList.js</div>\n                  </div>\n                </div>\n                <div className=\"flex-1 bg-gray-900 p-4\">\n                  <div className=\"text-gray-300 font-mono text-sm\">\n                    <div className=\"text-purple-400\">import React from 'react';</div>\n                    <div className=\"text-green-400\">function ProductList() {`{`}</div>\n                    <div className=\"pl-4 text-blue-400\">return (</div>\n                    <div className=\"pl-8 text-red-400\">&lt;div className=\"grid\"&gt;</div>\n                    <div className=\"pl-12 text-gray-300\">// AI generated code</div>\n                    <div className=\"pl-8 text-red-400\">&lt;/div&gt;</div>\n                    <div className=\"pl-4 text-blue-400\">);</div>\n                    <div className=\"text-green-400\">{`}`}</div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Steps */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-12\">\n              <div className=\"text-center\" data-testid=\"step-1\">\n                <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center text-white font-bold text-lg mx-auto mb-4\">1</div>\n                <h3 className=\"font-semibold mb-2\">اكتب الفكرة</h3>\n                <p className=\"text-muted-foreground text-sm\">صف مشروعك بالعربية أو الإنجليزية</p>\n              </div>\n              <div className=\"text-center\" data-testid=\"step-2\">\n                <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center text-white font-bold text-lg mx-auto mb-4\">2</div>\n                <h3 className=\"font-semibold mb-2\">الذكاء الاصطناعي يعمل</h3>\n                <p className=\"text-muted-foreground text-sm\">يحلل الطلب وينشئ الكود المناسب</p>\n              </div>\n              <div className=\"text-center\" data-testid=\"step-3\">\n                <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center text-white font-bold text-lg mx-auto mb-4\">3</div>\n                <h3 className=\"font-semibold mb-2\">مشروع جاهز</h3>\n                <p className=\"text-muted-foreground text-sm\">عدل واختبر وانشر مشروعك</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Templates Section */}\n      <section className=\"py-20 bg-background\" data-testid=\"templates-section\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">🎨 قوالب جاهزة</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              ابدأ بسرعة باستخدام قوالب احترافية جاهزة للتخصيص\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {templates.map((template) => (\n              <Card key={template.id} className=\"feature-card overflow-hidden\" data-testid={`template-card-${template.id}`}>\n                <img\n                  src={template.image}\n                  alt={template.name}\n                  className=\"w-full h-48 object-cover\"\n                />\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold mb-2\">{template.name}</h3>\n                  <p className=\"text-muted-foreground text-sm mb-4\">{template.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {template.framework}\n                    </Badge>\n                    <Button\n                      variant=\"link\"\n                      size=\"sm\"\n                      className=\"p-0 h-auto\"\n                      data-testid={`template-use-${template.id}`}\n                    >\n                      {t(\"template.use\")}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Button variant=\"outline\" size=\"lg\" data-testid=\"button-all-templates\">\n              عرض جميع القوالب (50+ قالب)\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-muted/30\" data-testid=\"pricing-section\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">💰 الخطط والأسعار</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              اختر الخطة المناسبة لاحتياجاتك وابدأ رحلتك في التطوير بالذكاء الاصطناعي\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            {pricingPlans.map((plan, index) => (\n              <Card \n                key={index} \n                className={`relative feature-card p-8 ${plan.popular ? 'border-primary ring-2 ring-primary/20' : ''}`} \n                data-testid={`pricing-plan-${plan.name.toLowerCase()}`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-primary text-white px-4 py-1\">\n                      الأكثر شعبية\n                    </Badge>\n                  </div>\n                )}\n                \n                <CardContent className=\"p-0\">\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-2xl font-bold mb-2\">{plan.name}</h3>\n                    <p className=\"text-muted-foreground text-sm mb-4\">{plan.description}</p>\n                    <div className=\"flex items-baseline justify-center gap-1\">\n                      <span className=\"text-4xl font-bold\">{plan.price}</span>\n                      <span className=\"text-muted-foreground\">ر.س</span>\n                      <span className=\"text-muted-foreground text-sm\">/ {plan.period}</span>\n                    </div>\n                  </div>\n\n                  <ul className=\"space-y-3 mb-8\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-start gap-3\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 flex-shrink-0 mt-0.5\" />\n                        <span className=\"text-sm text-muted-foreground\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  <Button \n                    className={`w-full ${plan.popular ? 'gradient-bg text-white' : ''}`}\n                    variant={plan.popular ? \"default\" : \"outline\"}\n                    onClick={plan.ctaAction}\n                    data-testid={`button-plan-${plan.name.toLowerCase()}`}\n                  >\n                    {plan.buttonText}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <p className=\"text-muted-foreground text-sm mb-4\">\n              جميع الخطط تتضمن ضمان استرداد المال خلال 30 يوم\n            </p>\n            <div className=\"flex items-center justify-center gap-6 text-sm text-muted-foreground\">\n              <span className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                دعم فني على مدار الساعة\n              </span>\n              <span className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                تحديثات مجانية\n              </span>\n              <span className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                بدون رسوم إضافية\n              </span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section id=\"community\" className=\"py-20 bg-muted/30\" data-testid=\"testimonials-section\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">👥 مجتمع المطورين</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              انضم لآلاف المطورين العرب واكتشف ما يقولونه عن ماركود\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"feature-card p-6\" data-testid={`testimonial-${index}`}>\n                <CardContent className=\"p-0\">\n                  <div className=\"flex items-center gap-4 mb-4\">\n                    <img\n                      src={testimonial.image}\n                      alt={testimonial.name}\n                      className=\"w-12 h-12 rounded-full object-cover\"\n                    />\n                    <div>\n                      <h4 className=\"font-semibold\">{testimonial.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                    </div>\n                  </div>\n                  <p className=\"text-muted-foreground mb-4\">\"{testimonial.content}\"</p>\n                  <div className=\"flex text-yellow-400\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} className=\"w-4 h-4 fill-current\" />\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Community stats */}\n          <Card className=\"bg-muted/50 p-8\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 text-center\">\n              <div data-testid=\"community-stat-developers\">\n                <div className=\"text-3xl font-bold text-primary mb-2\">5,000+</div>\n                <div className=\"text-muted-foreground\">مطور نشط</div>\n              </div>\n              <div data-testid=\"community-stat-projects\">\n                <div className=\"text-3xl font-bold text-accent mb-2\">15,000+</div>\n                <div className=\"text-muted-foreground\">مشروع منشور</div>\n              </div>\n              <div data-testid=\"community-stat-companies\">\n                <div className=\"text-3xl font-bold text-purple-500 mb-2\">200+</div>\n                <div className=\"text-muted-foreground\">مؤسسة تستخدم المنصة</div>\n              </div>\n              <div data-testid=\"community-stat-satisfaction\">\n                <div className=\"text-3xl font-bold text-orange-500 mb-2\">98%</div>\n                <div className=\"text-muted-foreground\">معدل الرضا</div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 gradient-bg\" data-testid=\"cta-section\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n            جاهز لبناء مشروعك القادم؟\n          </h2>\n          <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">\n            انضم لآلاف المطورين واحصل على أول مشروع مجاناً في أقل من 5 دقائق\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4 mb-8\">\n            <Button\n              size=\"lg\"\n              className=\"bg-white text-primary hover:bg-white/90\"\n              onClick={() => window.location.href = \"/api/login\"}\n              data-testid=\"button-cta-start\"\n            >\n              <Rocket className=\"w-4 h-4 mr-2\" />\n              ابدأ مجاناً الآن\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"border-white/30 text-white hover:bg-white/10\"\n              data-testid=\"button-cta-demo\"\n            >\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              احجز عرض تجريبي\n            </Button>\n          </div>\n\n          <div className=\"text-white/80 text-sm flex items-center justify-center gap-4\">\n            <span className=\"flex items-center gap-1\">\n              <CheckCircle className=\"w-4 h-4\" />\n              بدون بطاقة ائتمان\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <CheckCircle className=\"w-4 h-4\" />\n              إلغاء في أي وقت\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <CheckCircle className=\"w-4 h-4\" />\n              دعم 24/7\n            </span>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":27182},"client/src/pages/Templates.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLanguage } from \"@/components/LanguageProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Template } from \"@shared/schema\";\nimport {\n  Search,\n  Filter,\n  Code2,\n  ExternalLink,\n  Star,\n  Download,\n  Play,\n  Sparkles,\n  Globe,\n  ShoppingCart,\n  User,\n  Camera,\n  Heart,\n  BookOpen,\n  Briefcase,\n  Gamepad2,\n  Music,\n  Utensils\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst createFromTemplateSchema = z.object({\n  name: z.string().min(1, \"اسم المشروع مطلوب\"),\n  description: z.string().optional(),\n});\n\ntype CreateFromTemplate = z.infer<typeof createFromTemplateSchema>;\n\nexport default function Templates() {\n  const { t } = useLanguage();\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const form = useForm<CreateFromTemplate>({\n    resolver: zodResolver(createFromTemplateSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const { data: templates = [], isLoading } = useQuery<Template[]>({\n    queryKey: [\"/api/templates\"],\n    retry: false,\n  });\n\n  const createFromTemplateMutation = useMutation({\n    mutationFn: async ({ templateId, data }: { templateId: string; data: CreateFromTemplate }) => {\n      const response = await apiRequest(\"POST\", `/api/projects/from-template/${templateId}`, data);\n      return response.json();\n    },\n    onSuccess: (project) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"تم إنشاء المشروع بنجاح\",\n        description: \"تم إنشاء مشروعك من القالب\",\n      });\n      setLocation(`/editor/${project.id}`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"خطأ في إنشاء المشروع\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const categories = [\n    { id: \"all\", label: \"جميع الفئات\", icon: Globe },\n    { id: \"ecommerce\", label: \"متاجر إلكترونية\", icon: ShoppingCart },\n    { id: \"portfolio\", label: \"معرض أعمال\", icon: User },\n    { id: \"blog\", label: \"مدونة\", icon: BookOpen },\n    { id: \"business\", label: \"أعمال\", icon: Briefcase },\n    { id: \"restaurant\", label: \"مطاعم\", icon: Utensils },\n    { id: \"photography\", label: \"تصوير\", icon: Camera },\n    { id: \"health\", label: \"صحة\", icon: Heart },\n    { id: \"gaming\", label: \"ألعاب\", icon: Gamepad2 },\n    { id: \"music\", label: \"موسيقى\", icon: Music },\n  ];\n\n  const filteredTemplates = templates.filter((template) => {\n    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         template.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = categoryFilter === \"all\" || template.category === categoryFilter;\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleUseTemplate = (template: Template) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"تسجيل الدخول مطلوب\",\n        description: \"يجب تسجيل الدخول لاستخدام القوالب\",\n      });\n      window.location.href = \"/api/login\";\n      return;\n    }\n\n    setSelectedTemplate(template);\n    form.setValue(\"name\", template.name);\n    form.setValue(\"description\", template.description || \"\");\n    setIsCreateDialogOpen(true);\n  };\n\n  const onSubmit = (data: CreateFromTemplate) => {\n    if (selectedTemplate) {\n      createFromTemplateMutation.mutate({\n        templateId: selectedTemplate.id,\n        data,\n      });\n    }\n  };\n\n  const getFrameworkColor = (framework: string) => {\n    const colors: Record<string, string> = {\n      react: \"bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100\",\n      vue: \"bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\",\n      angular: \"bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100\",\n      svelte: \"bg-orange-100 text-orange-800 dark:bg-orange-800 dark:text-orange-100\",\n      nodejs: \"bg-purple-100 text-purple-800 dark:bg-purple-800 dark:text-purple-100\",\n      nextjs: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100\",\n      flutter: \"bg-cyan-100 text-cyan-800 dark:bg-cyan-800 dark:text-cyan-100\",\n    };\n    return colors[framework.toLowerCase()] || \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100\";\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\" data-testid=\"templates-page\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <div className=\"mb-6\">\n          <div className=\"w-16 h-16 gradient-bg rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Sparkles className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"templates-title\">\n            🎨 {t(\"templates.title\")}\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"templates-subtitle\">\n            {t(\"templates.subtitle\")}\n          </p>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col lg:flex-row gap-6 mb-8\">\n        {/* Search */}\n        <div className=\"flex-1 relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"البحث في القوالب...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-templates\"\n          />\n        </div>\n\n        {/* Category Filter */}\n        <div className=\"flex flex-wrap gap-2\">\n          {categories.map((category) => {\n            const CategoryIcon = category.icon;\n            return (\n              <Button\n                key={category.id}\n                variant={categoryFilter === category.id ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setCategoryFilter(category.id)}\n                className=\"flex items-center gap-2\"\n                data-testid={`filter-${category.id}`}\n              >\n                <CategoryIcon className=\"w-4 h-4\" />\n                {category.label}\n              </Button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Templates Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {[...Array(12)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"h-48 bg-muted rounded-t-lg\"></div>\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                <div className=\"h-8 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : filteredTemplates.length === 0 ? (\n        <Card className=\"text-center py-12\" data-testid=\"empty-templates\">\n          <CardContent>\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Search className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">لم يتم العثور على قوالب</h3>\n            <p className=\"text-muted-foreground\">جرب البحث بكلمات مختلفة أو غير الفلتر</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {filteredTemplates.map((template) => (\n            <Card key={template.id} className=\"feature-card group overflow-hidden\" data-testid={`template-card-${template.id}`}>\n              {/* Template Preview Image */}\n              <div className=\"relative h-48 bg-gradient-to-br from-primary/10 to-accent/10 overflow-hidden\">\n                {template.imageUrl ? (\n                  <img\n                    src={template.imageUrl}\n                    alt={template.name}\n                    className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center\">\n                    <Code2 className=\"w-12 h-12 text-primary/60\" />\n                  </div>\n                )}\n                <div className=\"absolute top-3 right-3\">\n                  <Badge className={getFrameworkColor(template.framework)}>\n                    {template.framework}\n                  </Badge>\n                </div>\n              </div>\n\n              <CardContent className=\"p-6\">\n                <div className=\"mb-4\">\n                  <h3 className=\"font-semibold text-lg mb-2 group-hover:text-primary transition-colors\" data-testid=\"template-name\">\n                    {template.name}\n                  </h3>\n                  <p className=\"text-muted-foreground text-sm line-clamp-2\" data-testid=\"template-description\">\n                    {template.description}\n                  </p>\n                </div>\n\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {template.language}\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                    {template.category}\n                  </Badge>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    onClick={() => handleUseTemplate(template)}\n                    className=\"flex-1\"\n                    data-testid={`button-use-${template.id}`}\n                  >\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    {t(\"template.use\")}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      // Template preview functionality would go here\n                      toast({\n                        title: \"المعاينة قريباً\",\n                        description: \"سيتم إضافة خاصية معاينة القوالب قريباً\",\n                      });\n                    }}\n                    data-testid={`button-preview-${template.id}`}\n                  >\n                    <ExternalLink className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Popular Templates Section */}\n      {!searchTerm && categoryFilter === \"all\" && templates.length > 0 && (\n        <div className=\"mt-16\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold\">🔥 القوالب الأكثر شعبية</h2>\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n              <Star className=\"w-3 h-3 fill-current\" />\n              مميز\n            </Badge>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {templates.slice(0, 3).map((template) => (\n              <Card key={`popular-${template.id}`} className=\"feature-card border-primary/20\" data-testid={`popular-template-${template.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Badge className={getFrameworkColor(template.framework)}>\n                      {template.framework}\n                    </Badge>\n                    <div className=\"flex items-center gap-1 text-yellow-500\">\n                      <Star className=\"w-4 h-4 fill-current\" />\n                      <span className=\"text-sm font-medium\">4.8</span>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <h3 className=\"font-semibold mb-2\">{template.name}</h3>\n                  <p className=\"text-muted-foreground text-sm mb-4 line-clamp-2\">\n                    {template.description}\n                  </p>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => handleUseTemplate(template)}\n                    className=\"w-full\"\n                    data-testid={`button-use-popular-${template.id}`}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    استخدم هذا القالب\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Create Project Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>إنشاء مشروع من القالب</DialogTitle>\n          </DialogHeader>\n          \n          {selectedTemplate && (\n            <div className=\"mb-4 p-3 bg-muted/30 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Code2 className=\"w-4 h-4 text-primary\" />\n                <span className=\"font-medium text-sm\">{selectedTemplate.name}</span>\n              </div>\n              <Badge className={getFrameworkColor(selectedTemplate.framework)}>\n                {selectedTemplate.framework}\n              </Badge>\n            </div>\n          )}\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t(\"form.project.name\")}</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-template-project-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t(\"form.project.description\")} (اختياري)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-template-project-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-2 justify-end pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsCreateDialogOpen(false)}\n                  data-testid=\"button-cancel-template\"\n                >\n                  {t(\"button.cancel\")}\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createFromTemplateMutation.isPending}\n                  data-testid=\"button-create-from-template\"\n                >\n                  {createFromTemplateMutation.isPending ? t(\"button.loading\") : t(\"button.create\")}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":16701},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nThis is a full-stack web application called \"Markode\" (ماركود) - an AI-powered platform for generating web applications and projects from natural language descriptions. The application supports both Arabic and English languages with a focus on serving Arabic-speaking developers. Users can describe their project ideas in plain language, and the AI generates complete, production-ready code with deployment capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript**: Single-page application built with React 18+ using TypeScript for type safety\n- **Vite Build System**: Fast development server and optimized production builds\n- **shadcn/ui Component Library**: Modern, accessible UI components built on Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens and dark mode support\n- **Wouter Router**: Lightweight client-side routing solution\n- **TanStack Query**: Server state management for data fetching and caching\n- **React Hook Form**: Form handling with Zod schema validation\n- **Monaco Editor**: Code editor component for viewing and editing generated code\n- **Internationalization**: Custom i18n solution supporting Arabic (RTL) and English (LTR) languages\n\n## Backend Architecture\n- **Express.js Server**: RESTful API server with TypeScript\n- **Session-based Authentication**: Secure user sessions using express-session with PostgreSQL storage\n- **Replit Authentication**: OAuth integration with Replit's OpenID Connect service\n- **AI Code Generation**: OpenAI API integration (GPT-5) for generating complete project structures\n- **File System Management**: Dynamic code generation and file management capabilities\n\n## Database Design\n- **PostgreSQL with Drizzle ORM**: Type-safe database queries and migrations\n- **Neon Database**: Serverless PostgreSQL database with connection pooling\n- **Core Tables**:\n  - `users`: User profiles and authentication data\n  - `projects`: Generated projects with metadata and source code\n  - `templates`: Pre-built project templates\n  - `sessions`: User session storage\n\n## Authentication & Authorization\n- **Replit OAuth Flow**: Seamless authentication through Replit's identity provider\n- **Session Management**: Secure server-side sessions with CSRF protection\n- **User Profile Management**: Automatic user profile creation and updates\n- **Access Control**: Project ownership validation and authorization middleware\n\n# External Dependencies\n\n## AI Services\n- **OpenAI API**: GPT-5 model for natural language to code generation\n- **Code Generation Pipeline**: Structured prompts for generating complete project architectures\n\n## Database & Storage\n- **Neon Database**: Serverless PostgreSQL hosting with automatic scaling\n- **Database Migrations**: Drizzle Kit for schema management and versioning\n\n## Authentication\n- **Replit OpenID Connect**: OAuth 2.0 authentication provider\n- **Session Storage**: PostgreSQL-backed session management\n\n## Development & Deployment\n- **Replit Platform Integration**: Development environment plugins and banners\n- **Vite Plugins**: Runtime error overlay and development tools\n- **WebSocket Support**: Real-time features through Neon's serverless infrastructure\n\n## UI & Styling\n- **Google Fonts**: Custom font loading (Inter, Cairo, Amiri, Fira Code)\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first styling framework\n- **Monaco Editor**: VS Code editor integration for code editing\n\n## Monitoring & Analytics\n- **Error Tracking**: Built-in error boundary handling\n- **Request Logging**: Comprehensive API request and response logging\n- **Performance Monitoring**: Client-side query caching and optimization","size_bytes":3790},"client/src/pages/About.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLanguage } from \"@/components/LanguageProvider\";\nimport { \n  Sparkles, \n  Target, \n  Users, \n  Award,\n  Code2,\n  Rocket,\n  Heart,\n  Star,\n  Globe,\n  TrendingUp\n} from \"lucide-react\";\n\nexport default function About() {\n  const { t } = useLanguage();\n\n  const teamMembers = [\n    {\n      name: \"أحمد العلي\",\n      role: \"المؤسس والرئيس التنفيذي\",\n      description: \"خبير في الذكاء الاصطناعي وريادة الأعمال التقنية\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      linkedin: \"#\"\n    },\n    {\n      name: \"فاطمة محمد\",\n      role: \"مديرة التطوير\",\n      description: \"متخصصة في تطوير الواجهات وتجربة المستخدم\",\n      image: \"https://images.unsplash.com/photo-1494790108755-2616b332e234?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      linkedin: \"#\"\n    },\n    {\n      name: \"عمر السالم\",\n      role: \"مدير التقنية\",\n      description: \"خبير في الحوسبة السحابية والأمان الرقمي\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      linkedin: \"#\"\n    }\n  ];\n\n  const milestones = [\n    {\n      year: \"2023\",\n      title: \"تأسيس الشركة\",\n      description: \"بدأت الفكرة من رؤية لتسهيل التطوير على المطورين العرب\"\n    },\n    {\n      year: \"2024\",\n      title: \"إطلاق النسخة التجريبية\",\n      description: \"إطلاق أول نسخة تجريبية مع 1000 مطور\"\n    },\n    {\n      year: \"2024\",\n      title: \"وصلنا 10,000 مطور\",\n      description: \"تجاوزنا 10 آلاف مطور مسجل وأنتجنا أكثر من 50 ألف مشروع\"\n    },\n    {\n      year: \"2025\",\n      title: \"التوسع الإقليمي\",\n      description: \"خطة للتوسع في منطقة الشرق الأوسط وشمال أفريقيا\"\n    }\n  ];\n\n  const stats = [\n    {\n      icon: Users,\n      number: \"15,000+\",\n      label: \"مطور نشط\",\n      color: \"text-blue-500\"\n    },\n    {\n      icon: Code2,\n      number: \"75,000+\",\n      label: \"مشروع منشور\",\n      color: \"text-green-500\"\n    },\n    {\n      icon: Globe,\n      number: \"25+\",\n      label: \"دولة\",\n      color: \"text-purple-500\"\n    },\n    {\n      icon: TrendingUp,\n      number: \"99%\",\n      label: \"معدل الرضا\",\n      color: \"text-orange-500\"\n    }\n  ];\n\n  const values = [\n    {\n      icon: Sparkles,\n      title: \"الابتكار\",\n      description: \"نؤمن بقوة الذكاء الاصطناعي في تغيير مستقبل التطوير\"\n    },\n    {\n      icon: Heart,\n      title: \"التركيز على المطور\",\n      description: \"كل قرار نتخذه يهدف لتحسين تجربة المطور\"\n    },\n    {\n      icon: Target,\n      title: \"الجودة\",\n      description: \"نلتزم بتقديم أعلى معايير الجودة في كل ما نطوره\"\n    },\n    {\n      icon: Users,\n      title: \"المجتمع\",\n      description: \"نبني مجتمعاً قوياً من المطورين العرب المبدعين\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold mb-4\">🚀 عن ماركود</h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8\">\n            نحن فريق من المطورين والمبدعين العرب، نعمل على تطوير أدوات ذكية تساعد المطورين على تحويل أفكارهم إلى مشاريع حقيقية بسرعة وسهولة\n          </p>\n        </div>\n\n        {/* Mission & Vision */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-20\">\n          <Card className=\"feature-card p-8\">\n            <CardContent className=\"p-0\">\n              <div className=\"flex items-center gap-4 mb-6\">\n                <div className=\"w-12 h-12 rounded-lg gradient-bg flex items-center justify-center\">\n                  <Target className=\"w-6 h-6 text-white\" />\n                </div>\n                <h2 className=\"text-2xl font-bold\">رسالتنا</h2>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                نهدف إلى تمكين كل مطور عربي من تحويل أفكاره إلى مشاريع ناجحة باستخدام أحدث تقنيات الذكاء الاصطناعي، مع توفير تجربة سلسة ومحتوى باللغة العربية.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"feature-card p-8\">\n            <CardContent className=\"p-0\">\n              <div className=\"flex items-center gap-4 mb-6\">\n                <div className=\"w-12 h-12 rounded-lg gradient-bg flex items-center justify-center\">\n                  <Rocket className=\"w-6 h-6 text-white\" />\n                </div>\n                <h2 className=\"text-2xl font-bold\">رؤيتنا</h2>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                أن نصبح المنصة الرائدة للتطوير بالذكاء الاصطناعي في المنطقة العربية، وأن نساهم في بناء جيل جديد من المطورين المبدعين والمبتكرين.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-20\">\n          {stats.map((stat, index) => (\n            <Card key={index} className=\"feature-card p-6 text-center\" data-testid={`stat-${index}`}>\n              <CardContent className=\"p-0\">\n                <div className={`w-12 h-12 rounded-lg bg-muted flex items-center justify-center mx-auto mb-4 ${stat.color}`}>\n                  <stat.icon className=\"w-6 h-6\" />\n                </div>\n                <div className=\"text-3xl font-bold mb-2\">{stat.number}</div>\n                <div className=\"text-muted-foreground text-sm\">{stat.label}</div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Values */}\n        <div className=\"mb-20\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">قيمنا</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {values.map((value, index) => (\n              <Card key={index} className=\"feature-card p-6 text-center\" data-testid={`value-${index}`}>\n                <CardContent className=\"p-0\">\n                  <div className=\"w-12 h-12 rounded-lg gradient-bg flex items-center justify-center mx-auto mb-4\">\n                    <value.icon className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <h3 className=\"font-semibold text-lg mb-3\">{value.title}</h3>\n                  <p className=\"text-muted-foreground text-sm\">{value.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Team */}\n        <div className=\"mb-20\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">فريق العمل</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {teamMembers.map((member, index) => (\n              <Card key={index} className=\"feature-card p-6 text-center\" data-testid={`team-member-${index}`}>\n                <CardContent className=\"p-0\">\n                  <img\n                    src={member.image}\n                    alt={member.name}\n                    className=\"w-24 h-24 rounded-full mx-auto mb-4 object-cover\"\n                  />\n                  <h3 className=\"font-semibold text-lg mb-1\">{member.name}</h3>\n                  <Badge variant=\"outline\" className=\"mb-3\">{member.role}</Badge>\n                  <p className=\"text-muted-foreground text-sm\">{member.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Timeline */}\n        <div className=\"mb-20\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">رحلتنا</h2>\n          <div className=\"max-w-4xl mx-auto\">\n            {milestones.map((milestone, index) => (\n              <div key={index} className=\"flex items-start gap-6 mb-8 last:mb-0\" data-testid={`milestone-${index}`}>\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-12 h-12 rounded-full gradient-bg flex items-center justify-center text-white font-bold\">\n                    {milestone.year.slice(-2)}\n                  </div>\n                </div>\n                <Card className=\"feature-card flex-1\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Badge variant=\"outline\">{milestone.year}</Badge>\n                      <h3 className=\"font-semibold text-lg\">{milestone.title}</h3>\n                    </div>\n                    <p className=\"text-muted-foreground\">{milestone.description}</p>\n                  </CardContent>\n                </Card>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Awards */}\n        <Card className=\"bg-muted/50 p-8 text-center\">\n          <div className=\"max-w-3xl mx-auto\">\n            <Award className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-4\">الجوائز والإنجازات</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              حصلنا على عدة جوائز وإشادات من مؤسسات تقنية مرموقة\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"p-4 bg-background rounded-lg\">\n                <Star className=\"w-8 h-8 text-yellow-500 mx-auto mb-2\" />\n                <h4 className=\"font-semibold mb-1\">أفضل منصة تطوير 2024</h4>\n                <p className=\"text-muted-foreground text-sm\">جائزة التقنية العربية</p>\n              </div>\n              \n              <div className=\"p-4 bg-background rounded-lg\">\n                <Star className=\"w-8 h-8 text-yellow-500 mx-auto mb-2\" />\n                <h4 className=\"font-semibold mb-1\">الشركة الناشئة الأكثر ابتكاراً</h4>\n                <p className=\"text-muted-foreground text-sm\">مؤتمر الذكاء الاصطناعي 2024</p>\n              </div>\n              \n              <div className=\"p-4 bg-background rounded-lg\">\n                <Star className=\"w-8 h-8 text-yellow-500 mx-auto mb-2\" />\n                <h4 className=\"font-semibold mb-1\">أسرع نمو في المنطقة</h4>\n                <p className=\"text-muted-foreground text-sm\">تقرير الشركات التقنية</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11276},"client/src/pages/ComingSoon.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useLanguage } from \"@/components/LanguageProvider\";\nimport { useLocation } from \"wouter\";\nimport { \n  Construction, \n  ArrowLeft,\n  Bell,\n  Calendar\n} from \"lucide-react\";\n\nexport default function ComingSoon() {\n  const { t } = useLanguage();\n  const [, setLocation] = useLocation();\n\n  // Default content based on current path\n  const getPageContent = () => {\n    const currentPath = window.location.pathname;\n    \n    switch (currentPath) {\n      case '/api':\n        return {\n          title: \"📡 مستندات API\",\n          description: \"سنقوم بتوفير مستندات شاملة لـ API ماركود للمطورين قريباً\"\n        };\n      case '/status':\n        return {\n          title: \"🔄 حالة الخدمة\",\n          description: \"صفحة مراقبة حالة الخدمات والسيرفرات ستكون متاحة قريباً\"\n        };\n      case '/jobs':\n        return {\n          title: \"💼 الوظائف\",\n          description: \"نحن نبحث عن المواهب المميزة! صفحة الوظائف ستكون متاحة قريباً\"\n        };\n      case '/blog':\n        return {\n          title: \"📝 المدونة\",\n          description: \"مدونة ماركود مع أحدث الأخبار والتحديثات والمقالات التقنية قريباً\"\n        };\n      case '/partners':\n        return {\n          title: \"🤝 الشراكات\",\n          description: \"معلومات الشراكات والتعاون مع ماركود ستكون متاحة قريباً\"\n        };\n      default:\n        return {\n          title: \"🚧 قريباً\",\n          description: \"هذه الصفحة قيد التطوير وستكون متاحة قريباً\"\n        };\n    }\n  };\n\n  const content = getPageContent();\n\n  return (\n    <div className=\"min-h-screen py-20 flex items-center justify-center\">\n      <div className=\"container mx-auto px-4\">\n        <Card className=\"max-w-2xl mx-auto text-center p-8\">\n          <CardContent className=\"p-0\">\n            <div className=\"w-20 h-20 rounded-full gradient-bg flex items-center justify-center mx-auto mb-6\">\n              <Construction className=\"w-10 h-10 text-white\" />\n            </div>\n            \n            <h1 className=\"text-4xl font-bold mb-4\">{content.title}</h1>\n            <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed\">\n              {content.description}\n            </p>\n\n            <div className=\"bg-muted/50 rounded-lg p-6 mb-8\">\n              <div className=\"flex items-center justify-center gap-2 mb-4\">\n                <Bell className=\"w-5 h-5 text-primary\" />\n                <span className=\"font-semibold\">تنبيه عند الإطلاق</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                أدخل بريدك الإلكتروني وسنرسل لك تنبيه عند إطلاق هذه الميزة\n              </p>\n              <div className=\"flex gap-3 max-w-md mx-auto\">\n                <input\n                  type=\"email\"\n                  placeholder=\"بريدك الإلكتروني\"\n                  className=\"flex-1 px-4 py-2 rounded-lg border border-border bg-background\"\n                  data-testid=\"input-notify-email\"\n                />\n                <Button data-testid=\"button-notify-me\">\n                  أشعرني\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n              <div className=\"p-4 bg-muted/30 rounded-lg\">\n                <Calendar className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n                <h3 className=\"font-semibold text-sm\">الإطلاق المتوقع</h3>\n                <p className=\"text-xs text-muted-foreground\">الربع الأول 2025</p>\n              </div>\n              \n              <div className=\"p-4 bg-muted/30 rounded-lg\">\n                <Construction className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n                <h3 className=\"font-semibold text-sm\">قيد التطوير</h3>\n                <p className=\"text-xs text-muted-foreground\">نعمل عليها الآن</p>\n              </div>\n              \n              <div className=\"p-4 bg-muted/30 rounded-lg\">\n                <Bell className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n                <h3 className=\"font-semibold text-sm\">إشعارات</h3>\n                <p className=\"text-xs text-muted-foreground\">سنخبرك عند الانتهاء</p>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setLocation('/')}\n                data-testid=\"button-back-home\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                العودة للرئيسية\n              </Button>\n              <Button \n                onClick={() => setLocation('/contact')}\n                data-testid=\"button-contact-us\"\n              >\n                تواصل معنا للاستفسار\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5385},"client/src/pages/Contact.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useLanguage } from \"@/components/LanguageProvider\";\nimport { useState } from \"react\";\nimport { \n  Mail, \n  Phone, \n  MapPin, \n  Clock, \n  MessageCircle,\n  Send,\n  CheckCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contact() {\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n\n  const contactInfo = [\n    {\n      icon: Mail,\n      title: \"البريد الإلكتروني\",\n      content: \"support@markode.app\",\n      description: \"راسلنا في أي وقت وسنرد خلال 24 ساعة\",\n      color: \"text-blue-500\"\n    },\n    {\n      icon: Phone,\n      title: \"الهاتف\",\n      content: \"+966 11 234 5678\",\n      description: \"دعم هاتفي من السبت إلى الخميس\",\n      color: \"text-green-500\"\n    },\n    {\n      icon: MapPin,\n      title: \"العنوان\",\n      content: \"الرياض، المملكة العربية السعودية\",\n      description: \"حي الملك عبدالله للتقنية المالية\",\n      color: \"text-purple-500\"\n    },\n    {\n      icon: Clock,\n      title: \"ساعات العمل\",\n      content: \"9:00 ص - 6:00 م\",\n      description: \"السبت - الخميس (بتوقيت الرياض)\",\n      color: \"text-orange-500\"\n    }\n  ];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    toast({\n      title: \"تم إرسال رسالتك بنجاح!\",\n      description: \"سنتواصل معك خلال 24 ساعة\",\n    });\n\n    setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n    setIsSubmitting(false);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold mb-4\">📞 تواصل معنا</h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            نحن هنا لمساعدتك. تواصل معنا بأي طريقة تناسبك وسنكون سعداء للإجابة على أسئلتك\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16\">\n          {/* Contact Form */}\n          <Card className=\"feature-card\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl flex items-center gap-2\">\n                <Send className=\"w-6 h-6 text-primary\" />\n                أرسل لنا رسالة\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">الاسم الكامل</label>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"أدخل اسمك الكامل\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      required\n                      data-testid=\"input-contact-name\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">البريد الإلكتروني</label>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"example@email.com\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                      required\n                      data-testid=\"input-contact-email\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">الموضوع</label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"موضوع رسالتك\"\n                    value={formData.subject}\n                    onChange={(e) => handleInputChange(\"subject\", e.target.value)}\n                    required\n                    data-testid=\"input-contact-subject\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">الرسالة</label>\n                  <Textarea\n                    placeholder=\"اكتب رسالتك هنا...\"\n                    rows={5}\n                    value={formData.message}\n                    onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                    required\n                    data-testid=\"textarea-contact-message\"\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                  data-testid=\"button-send-message\"\n                >\n                  {isSubmitting ? (\n                    \"جارٍ الإرسال...\"\n                  ) : (\n                    <>\n                      <Send className=\"w-4 h-4 mr-2\" />\n                      إرسال الرسالة\n                    </>\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Info */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold mb-6\">طرق التواصل</h2>\n            \n            {contactInfo.map((info, index) => (\n              <Card key={index} className=\"feature-card\" data-testid={`contact-info-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className={`w-12 h-12 rounded-lg bg-muted flex items-center justify-center ${info.color}`}>\n                      <info.icon className=\"w-6 h-6\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-lg mb-1\">{info.title}</h3>\n                      <p className=\"text-primary font-medium mb-2\">{info.content}</p>\n                      <p className=\"text-muted-foreground text-sm\">{info.description}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* FAQ Section */}\n        <Card className=\"bg-muted/50 p-8 text-center\">\n          <div className=\"max-w-3xl mx-auto\">\n            <MessageCircle className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-4\">أسئلة شائعة</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              قد تجد إجابة سؤالك في قسم الأسئلة الشائعة قبل التواصل معنا\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 text-right\">\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-background rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">كم يستغرق إنشاء مشروع؟</h4>\n                  <p className=\"text-muted-foreground text-sm\">عادة ما يستغرق 2-5 دقائق حسب تعقيد المشروع</p>\n                </div>\n                <div className=\"p-4 bg-background rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">هل يمكنني تعديل الكود؟</h4>\n                  <p className=\"text-muted-foreground text-sm\">نعم، يمكنك تعديل الكود باستخدام محرر الأكواد المدمج</p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-background rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">هل الاستضافة مجانية؟</h4>\n                  <p className=\"text-muted-foreground text-sm\">نعم، نوفر استضافة مجانية للمشاريع الأساسية</p>\n                </div>\n                <div className=\"p-4 bg-background rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">ما هي طرق الدفع المتاحة؟</h4>\n                  <p className=\"text-muted-foreground text-sm\">نقبل Visa، Mastercard، وInstaPay</p>\n                </div>\n              </div>\n            </div>\n            \n            <Button variant=\"outline\" className=\"mt-6\" data-testid=\"button-view-faq\">\n              عرض جميع الأسئلة الشائعة\n            </Button>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9299},"client/src/pages/HelpCenter.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLanguage } from \"@/components/LanguageProvider\";\nimport { useState } from \"react\";\nimport { \n  Search, \n  MessageCircle, \n  Book, \n  FileText, \n  Video, \n  Mail,\n  ChevronRight,\n  ExternalLink\n} from \"lucide-react\";\n\nexport default function HelpCenter() {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const helpCategories = [\n    {\n      icon: Book,\n      title: \"دليل البدء السريع\",\n      description: \"تعلم كيفية إنشاء أول مشروع في 5 دقائق\",\n      articles: 12,\n      color: \"text-blue-500\"\n    },\n    {\n      icon: FileText,\n      title: \"إدارة المشاريع\",\n      description: \"كيفية إنشاء وتحرير ونشر مشاريعك\",\n      articles: 8,\n      color: \"text-green-500\"\n    },\n    {\n      icon: Video,\n      title: \"شروحات فيديو\",\n      description: \"مقاطع فيديو تعليمية خطوة بخطوة\",\n      articles: 15,\n      color: \"text-purple-500\"\n    }\n  ];\n\n  const popularArticles = [\n    {\n      title: \"كيفية إنشاء مشروع جديد\",\n      description: \"دليل شامل لإنشاء مشروع باستخدام الذكاء الاصطناعي\",\n      readTime: \"5 دقائق\"\n    },\n    {\n      title: \"استخدام القوالب الجاهزة\",\n      description: \"كيفية اختيار وتخصيص القوالب لمشروعك\",\n      readTime: \"3 دقائق\"\n    },\n    {\n      title: \"نشر مشروعك على الإنترنت\",\n      description: \"خطوات نشر مشروعك وربط نطاق مخصص\",\n      readTime: \"7 دقائق\"\n    },\n    {\n      title: \"تحرير الكود يدوياً\",\n      description: \"استخدام محرر الأكواد المدمج لتخصيص مشروعك\",\n      readTime: \"10 دقائق\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold mb-4\">🛟 مركز المساعدة</h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto mb-8\">\n            ابحث عن إجابات لأسئلتك أو تواصل مع فريق الدعم\n          </p>\n          \n          {/* Search */}\n          <div className=\"max-w-2xl mx-auto relative\">\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n            <Input\n              type=\"text\"\n              placeholder=\"ابحث في مركز المساعدة...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-12 h-14 text-lg\"\n              data-testid=\"input-help-search\"\n            />\n          </div>\n        </div>\n\n        {/* Categories */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {helpCategories.map((category, index) => (\n            <Card key={index} className=\"feature-card cursor-pointer hover:shadow-lg transition-all\" data-testid={`help-category-${index}`}>\n              <CardHeader>\n                <div className=\"flex items-center gap-4\">\n                  <div className={`w-12 h-12 rounded-lg bg-muted flex items-center justify-center ${category.color}`}>\n                    <category.icon className=\"w-6 h-6\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg\">{category.title}</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {category.articles} مقال\n                    </p>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">{category.description}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Popular Articles */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-2xl font-bold mb-8 text-center\">📚 المقالات الأكثر شعبية</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {popularArticles.map((article, index) => (\n              <Card key={index} className=\"feature-card cursor-pointer hover:shadow-lg transition-all\" data-testid={`popular-article-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <h3 className=\"font-semibold text-lg\">{article.title}</h3>\n                    <ExternalLink className=\"w-4 h-4 text-muted-foreground flex-shrink-0 ml-2\" />\n                  </div>\n                  <p className=\"text-muted-foreground text-sm mb-4\">{article.description}</p>\n                  <div className=\"text-xs text-muted-foreground\">\n                    وقت القراءة: {article.readTime}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Contact Support */}\n        <Card className=\"bg-muted/50 p-8 text-center\">\n          <div className=\"max-w-2xl mx-auto\">\n            <MessageCircle className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-4\">لا تجد ما تبحث عنه؟</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              فريق الدعم لدينا جاهز لمساعدتك على مدار الساعة. تواصل معنا وسنرد عليك في أقرب وقت ممكن.\n            </p>\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n              <Button size=\"lg\" data-testid=\"button-contact-support\">\n                <Mail className=\"w-4 h-4 mr-2\" />\n                تواصل مع الدعم\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" data-testid=\"button-live-chat\">\n                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                دردشة مباشرة\n              </Button>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6428},"client/src/pages/Login.tsx":{"content":"import { useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Login() {\n  useEffect(() => {\n    // Redirect to server auth endpoint\n    window.location.assign(\"/api/login\");\n  }, []);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <Card className=\"w-96\">\n        <CardContent className=\"p-8 text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-primary\" data-testid=\"loading-spinner\" />\n          <h2 className=\"text-xl font-semibold mb-2\">جاري تسجيل الدخول</h2>\n          <p className=\"text-muted-foreground\">\n            سيتم تحويلك إلى صفحة تسجيل الدخول...\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":836},"client/src/pages/Features.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  Code2, \n  Sparkles, \n  Zap, \n  Globe, \n  Shield, \n  Users,\n  Brain,\n  Rocket,\n  Clock,\n  Settings,\n  Palette,\n  Database\n} from \"lucide-react\";\n\nexport default function Features() {\n  const features = [\n    {\n      icon: <Brain className=\"w-8 h-8 text-blue-600\" />,\n      title: \"الذكاء الاصطناعي المتطور\",\n      description: \"يستخدم ماركود أحدث تقنيات الذكاء الاصطناعي لتوليد كود عالي الجودة يناسب احتياجاتك\",\n      badge: \"AI-Powered\"\n    },\n    {\n      icon: <Code2 className=\"w-8 h-8 text-green-600\" />,\n      title: \"توليد الكود التلقائي\",\n      description: \"أنشئ تطبيقات ومواقع ويب كاملة بمجرد وصف فكرتك باللغة العربية\",\n      badge: \"Smart Generation\"\n    },\n    {\n      icon: <Sparkles className=\"w-8 h-8 text-purple-600\" />,\n      title: \"تحسين الكود الذكي\",\n      description: \"حسّن الكود الموجود بطلبات واضحة لتحسين الأداء والجودة والأمان\",\n      badge: \"Code Enhancement\"\n    },\n    {\n      icon: <Zap className=\"w-8 h-8 text-yellow-600\" />,\n      title: \"سرعة التطوير\",\n      description: \"اختصر وقت التطوير من أسابيع إلى دقائق مع أدوات الذكاء الاصطناعي\",\n      badge: \"Fast Development\"\n    },\n    {\n      icon: <Globe className=\"w-8 h-8 text-indigo-600\" />,\n      title: \"دعم اللغة العربية\",\n      description: \"واجهة عربية كاملة مع دعم للبرمجة باللغة العربية لأول مرة\",\n      badge: \"Arabic Support\"\n    },\n    {\n      icon: <Palette className=\"w-8 h-8 text-pink-600\" />,\n      title: \"محرر كود متطور\",\n      description: \"محرر كود مدمج مع إبراز الصيغة وإكمال تلقائي وأدوات تطوير متقدمة\",\n      badge: \"Advanced Editor\"\n    },\n    {\n      icon: <Settings className=\"w-8 h-8 text-gray-600\" />,\n      title: \"قوالب جاهزة\",\n      description: \"مجموعة واسعة من القوالب الجاهزة للمشاريع المختلفة\",\n      badge: \"Ready Templates\"\n    },\n    {\n      icon: <Database className=\"w-8 h-8 text-blue-600\" />,\n      title: \"إدارة المشاريع\",\n      description: \"احفظ وأدر مشاريعك بسهولة مع نظام تخزين آمن ومنظم\",\n      badge: \"Project Management\"\n    },\n    {\n      icon: <Shield className=\"w-8 h-8 text-red-600\" />,\n      title: \"الأمان والخصوصية\",\n      description: \"حماية كاملة لبياناتك ومشاريعك مع أعلى معايير الأمان\",\n      badge: \"Secure\"\n    },\n    {\n      icon: <Users className=\"w-8 h-8 text-teal-600\" />,\n      title: \"العمل الجماعي\",\n      description: \"تعاون مع فريقك على المشاريع مع أدوات المشاركة المتقدمة\",\n      badge: \"Collaboration\"\n    },\n    {\n      icon: <Clock className=\"w-8 h-8 text-orange-600\" />,\n      title: \"التطوير السريع\",\n      description: \"من الفكرة إلى التطبيق المكتمل في وقت قياسي\",\n      badge: \"Quick Deploy\"\n    },\n    {\n      icon: <Rocket className=\"w-8 h-8 text-emerald-600\" />,\n      title: \"التحديث المستمر\",\n      description: \"تحديثات منتظمة لإضافة ميزات جديدة وتحسينات مستمرة\",\n      badge: \"Always Updated\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <div className=\"container mx-auto px-4 py-12\">\n        {/* Header */}\n        <div className=\"text-center mb-16\" data-testid=\"features-header\">\n          <h1 className=\"text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-6\">\n            مميزات ماركود\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed\">\n            اكتشف القوة الحقيقية للذكاء الاصطناعي في تطوير المواقع والتطبيقات. \n            ماركود يوفر أدوات متطورة تجعل البرمجة أسهل وأسرع من أي وقت مضى.\n          </p>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          {features.map((feature, index) => (\n            <Card \n              key={index} \n              className=\"group hover:shadow-2xl transition-all duration-300 border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm hover:scale-105\"\n              data-testid={`feature-card-${index}`}\n            >\n              <CardHeader className=\"text-center\">\n                <div className=\"mx-auto mb-4 p-3 rounded-2xl bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-700 dark:to-gray-600 w-fit group-hover:scale-110 transition-transform duration-300\">\n                  {feature.icon}\n                </div>\n                <Badge \n                  variant=\"secondary\" \n                  className=\"mb-2 text-xs\"\n                  data-testid={`feature-badge-${index}`}\n                >\n                  {feature.badge}\n                </Badge>\n                <CardTitle className=\"text-xl font-bold text-gray-800 dark:text-white\">\n                  {feature.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription className=\"text-gray-600 dark:text-gray-300 leading-relaxed text-center\">\n                  {feature.description}\n                </CardDescription>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center bg-gradient-to-r from-blue-600 to-purple-600 rounded-3xl p-12 text-white\">\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"features-cta-title\">\n            جاهز لبدء رحلتك مع ماركود؟\n          </h2>\n          <p className=\"text-xl opacity-90 mb-8 max-w-2xl mx-auto\">\n            انضم إلى آلاف المطورين الذين يستخدمون ماركود لتطوير تطبيقاتهم بسرعة وسهولة\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/dashboard\">\n              <Button \n                size=\"lg\" \n                className=\"bg-white text-blue-600 hover:bg-gray-100 text-lg px-8 py-3\"\n                data-testid=\"button-start-now\"\n              >\n                ابدأ الآن مجاناً\n              </Button>\n            </Link>\n            <Link href=\"/pricing\">\n              <Button \n                size=\"lg\" \n                variant=\"outline\" \n                className=\"border-white text-white hover:bg-white hover:text-blue-600 text-lg px-8 py-3\"\n                data-testid=\"button-view-pricing\"\n              >\n                عرض الأسعار\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7452},"client/src/pages/Pricing.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { Check, X, Star, Zap, Crown, Rocket } from \"lucide-react\";\n\nexport default function Pricing() {\n  const plans = [\n    {\n      name: \"المجاني\",\n      nameEn: \"Free\",\n      icon: <Zap className=\"w-8 h-8 text-blue-600\" />,\n      price: \"0\",\n      period: \"مجاناً للأبد\",\n      description: \"مثالي للمطورين المبتدئين والمشاريع الشخصية\",\n      features: [\n        \"5 مشاريع شهرياً\",\n        \"قوالب أساسية\",\n        \"محرر كود بسيط\",\n        \"تصدير الكود\",\n        \"دعم المجتمع\"\n      ],\n      limitations: [\n        \"بدون تحسين ذكي للكود\",\n        \"بدون مشاركة جماعية\",\n        \"بدون نشر مباشر\"\n      ],\n      popular: false,\n      cta: \"ابدأ مجاناً\",\n      ctaLink: \"/dashboard\"\n    },\n    {\n      name: \"المحترف\",\n      nameEn: \"Pro\",\n      icon: <Star className=\"w-8 h-8 text-purple-600\" />,\n      price: \"29\",\n      period: \"شهرياً\",\n      description: \"للمطورين المحترفين والشركات الناشئة\",\n      features: [\n        \"مشاريع غير محدودة\",\n        \"جميع القوالب المتقدمة\",\n        \"تحسين ذكي للكود بـ AI\",\n        \"محرر كود متطور\",\n        \"نشر مباشر\",\n        \"مشاركة جماعية (5 أعضاء)\",\n        \"دعم عبر البريد الإلكتروني\",\n        \"تحليلات المشاريع\"\n      ],\n      limitations: [],\n      popular: true,\n      cta: \"ابدأ التجربة المجانية\",\n      ctaLink: \"/dashboard\"\n    },\n    {\n      name: \"المؤسسات\",\n      nameEn: \"Enterprise\",\n      icon: <Crown className=\"w-8 h-8 text-gold-600\" />,\n      price: \"199\",\n      period: \"شهرياً\",\n      description: \"للشركات الكبيرة والفرق المتقدمة\",\n      features: [\n        \"كل ميزات المحترف\",\n        \"أعضاء غير محدودين\",\n        \"دعم فني مخصص 24/7\",\n        \"تدريب فريق العمل\",\n        \"تكامل مع أنظمة الشركة\",\n        \"أمان متقدم و SSO\",\n        \"تقارير مفصلة\",\n        \"خدمات تطوير مخصصة\"\n      ],\n      limitations: [],\n      popular: false,\n      cta: \"تواصل معنا\",\n      ctaLink: \"/contact\"\n    }\n  ];\n\n  const faqs = [\n    {\n      question: \"هل يمكنني تغيير خطتي في أي وقت؟\",\n      answer: \"نعم، يمكنك الترقية أو التراجع عن خطتك في أي وقت. التغييرات تدخل حيز التنفيذ فوراً.\"\n    },\n    {\n      question: \"هل هناك فترة تجريبية مجانية؟\",\n      answer: \"نعم، نوفر فترة تجريبية مجانية لمدة 14 يوماً لجميع الخطط المدفوعة بدون الحاجة لبطاقة ائتمان.\"\n    },\n    {\n      question: \"ما هي طرق الدفع المتاحة؟\",\n      answer: \"نقبل جميع البطاقات الائتمانية الرئيسية، PayPal، والتحويل البنكي للمؤسسات.\"\n    },\n    {\n      question: \"هل يمكنني إلغاء اشتراكي في أي وقت؟\",\n      answer: \"نعم، يمكنك إلغاء اشتراكك في أي وقت. لن تتم محاسبتك في الدورة التالية.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <div className=\"container mx-auto px-4 py-12\">\n        {/* Header */}\n        <div className=\"text-center mb-16\" data-testid=\"pricing-header\">\n          <h1 className=\"text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-6\">\n            خطط الأسعار\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed\">\n            اختر الخطة التي تناسب احتياجاتك. جميع الخطط تشمل الوصول الكامل للذكاء الاصطناعي \n            ومحرر الكود المتطور مع ضمان استرداد المال لمدة 30 يوماً.\n          </p>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {plans.map((plan, index) => (\n            <Card \n              key={index}\n              className={`relative group hover:shadow-2xl transition-all duration-300 ${\n                plan.popular \n                  ? 'ring-2 ring-purple-500 scale-105 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20' \n                  : 'bg-white/80 dark:bg-gray-800/80'\n              } backdrop-blur-sm hover:scale-110`}\n              data-testid={`pricing-card-${plan.nameEn.toLowerCase()}`}\n            >\n              {plan.popular && (\n                <Badge \n                  className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-purple-600 to-blue-600 text-white px-4 py-1\"\n                  data-testid=\"popular-badge\"\n                >\n                  الأكثر شعبية\n                </Badge>\n              )}\n              \n              <CardHeader className=\"text-center\">\n                <div className=\"mx-auto mb-4 p-3 rounded-2xl bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-700 dark:to-gray-600 w-fit group-hover:scale-110 transition-transform duration-300\">\n                  {plan.icon}\n                </div>\n                <CardTitle className=\"text-2xl font-bold text-gray-800 dark:text-white\">\n                  {plan.name}\n                </CardTitle>\n                <div className=\"mt-4\">\n                  <span className=\"text-4xl font-bold text-gray-900 dark:text-white\">\n                    ${plan.price}\n                  </span>\n                  <span className=\"text-gray-600 dark:text-gray-300 mr-2\">\n                    {plan.period}\n                  </span>\n                </div>\n                <CardDescription className=\"text-gray-600 dark:text-gray-300 mt-2\">\n                  {plan.description}\n                </CardDescription>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                {/* Features */}\n                <div className=\"space-y-3\">\n                  {plan.features.map((feature, featureIndex) => (\n                    <div \n                      key={featureIndex} \n                      className=\"flex items-center gap-3\"\n                      data-testid={`feature-${plan.nameEn.toLowerCase()}-${featureIndex}`}\n                    >\n                      <Check className=\"w-5 h-5 text-green-600 flex-shrink-0\" />\n                      <span className=\"text-gray-700 dark:text-gray-300\">{feature}</span>\n                    </div>\n                  ))}\n                  \n                  {plan.limitations.map((limitation, limitationIndex) => (\n                    <div \n                      key={limitationIndex} \n                      className=\"flex items-center gap-3 opacity-60\"\n                      data-testid={`limitation-${plan.nameEn.toLowerCase()}-${limitationIndex}`}\n                    >\n                      <X className=\"w-5 h-5 text-gray-400 flex-shrink-0\" />\n                      <span className=\"text-gray-500 dark:text-gray-400\">{limitation}</span>\n                    </div>\n                  ))}\n                </div>\n                \n                {/* CTA Button */}\n                <Link href={plan.ctaLink}>\n                  <Button \n                    className={`w-full mt-6 ${\n                      plan.popular \n                        ? 'bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700' \n                        : ''\n                    }`}\n                    variant={plan.popular ? \"default\" : \"outline\"}\n                    size=\"lg\"\n                    data-testid={`cta-button-${plan.nameEn.toLowerCase()}`}\n                  >\n                    {plan.cta}\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* FAQ Section */}\n        <div className=\"max-w-4xl mx-auto\">\n          <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800 dark:text-white\" data-testid=\"faq-title\">\n            الأسئلة الشائعة\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {faqs.map((faq, index) => (\n              <Card \n                key={index} \n                className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm hover:shadow-lg transition-shadow duration-300\"\n                data-testid={`faq-card-${index}`}\n              >\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-semibold text-gray-800 dark:text-white\">\n                    {faq.question}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-600 dark:text-gray-300 leading-relaxed\">\n                    {faq.answer}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Final CTA */}\n        <div className=\"text-center mt-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-3xl p-12 text-white\">\n          <Rocket className=\"w-16 h-16 mx-auto mb-6 text-white\" />\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"final-cta-title\">\n            جاهز لتحويل أفكارك إلى واقع؟\n          </h2>\n          <p className=\"text-xl opacity-90 mb-8 max-w-2xl mx-auto\">\n            انضم إلى آلاف المطورين الذين يستخدمون ماركود لبناء تطبيقات مذهلة\n          </p>\n          <Link href=\"/dashboard\">\n            <Button \n              size=\"lg\" \n              className=\"bg-white text-blue-600 hover:bg-gray-100 text-lg px-8 py-3\"\n              data-testid=\"button-start-free-trial\"\n            >\n              ابدأ التجربة المجانية الآن\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10510}},"version":1}